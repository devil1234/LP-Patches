From 06069bfc67dd4cd7950503d4ff4b192560536ff2 Mon Sep 17 00:00:00 2001
From: LordPsyan <lordpsyan@gmail.com>
Date: Sun, 23 Feb 2020 05:15:37 -0600
Subject: [PATCH] 2020_01_31-GuildLevelSystem_25_Levels

---
 .../auth/auth.guildlevelsystem.sql            |   7 +
 .../characters.guildlevelsystem.sql           |  85 ++++++++
 .../world/world.guildlevelsystem.sql          |   7 +
 .../Implementation/CharacterDatabase.cpp      |  10 +-
 .../Implementation/CharacterDatabase.h        |   7 +-
 src/server/game/Accounts/RBAC.h               |   4 +-
 src/server/game/Conditions/ConditionMgr.cpp   |  22 +++
 src/server/game/Conditions/ConditionMgr.h     |   3 +-
 src/server/game/Entities/Player/Player.cpp    |  52 ++++-
 src/server/game/Entities/Unit/Unit.cpp        |  26 ++-
 src/server/game/Guilds/Guild.cpp              | 182 ++++++++++++++++++
 src/server/game/Guilds/Guild.h                |  47 +++++
 src/server/game/Handlers/LootHandler.cpp      |  18 ++
 src/server/game/Miscellaneous/Formulas.h      |  18 +-
 src/server/game/Miscellaneous/Language.h      |   4 +-
 src/server/game/Reputation/ReputationMgr.cpp  |  14 ++
 src/server/game/World/World.cpp               | 139 ++++++++++++-
 src/server/game/World/World.h                 |  32 +++
 src/server/scripts/Commands/cs_guild.cpp      | 124 ++++++++++++
 19 files changed, 789 insertions(+), 12 deletions(-)
 create mode 100644 sql/LordPsyan-Patches/auth/auth.guildlevelsystem.sql
 create mode 100644 sql/LordPsyan-Patches/characters/characters.guildlevelsystem.sql
 create mode 100644 sql/LordPsyan-Patches/world/world.guildlevelsystem.sql

diff --git a/sql/LordPsyan-Patches/auth/auth.guildlevelsystem.sql b/sql/LordPsyan-Patches/auth/auth.guildlevelsystem.sql
new file mode 100644
index 0000000000..0846910e72
--- /dev/null
+++ b/sql/LordPsyan-Patches/auth/auth.guildlevelsystem.sql
@@ -0,0 +1,7 @@
+INSERT INTO `rbac_permissions` VALUES ('1000', 'Command: guild linfo');
+INSERT INTO `rbac_permissions` VALUES ('1001', 'Command: guild setlevel');
+INSERT INTO `rbac_permissions` VALUES ('1002', 'Command: guild givexp');
+
+INSERT INTO `rbac_linked_permissions` VALUES ('195', '1000');
+INSERT INTO `rbac_linked_permissions` VALUES ('192', '1001');
+INSERT INTO `rbac_linked_permissions` VALUES ('192', '1002');
diff --git a/sql/LordPsyan-Patches/characters/characters.guildlevelsystem.sql b/sql/LordPsyan-Patches/characters/characters.guildlevelsystem.sql
new file mode 100644
index 0000000000..342c0591e8
--- /dev/null
+++ b/sql/LordPsyan-Patches/characters/characters.guildlevelsystem.sql
@@ -0,0 +1,85 @@
+ALTER TABLE `guild` ADD `xp` INT(10) DEFAULT 0 NOT NULL AFTER `BankMoney`;
+ALTER TABLE `guild` ADD `level` TINYINT(3) DEFAULT 0 NOT NULL AFTER `xp`;
+
+SET FOREIGN_KEY_CHECKS=0;
+
+-- ----------------------------
+-- Table structure for `guild_bonus_config`
+-- ----------------------------
+DROP TABLE IF EXISTS `guild_bonus_config`;
+CREATE TABLE `guild_bonus_config` (
+  `BonusId` smallint(5) NOT NULL DEFAULT '0',
+  `RequiredGuildLevel` tinyint(3) NOT NULL DEFAULT '0',
+  `comment` longtext CHARACTER SET utf8
+) ENGINE=InnoDB DEFAULT CHARSET=latin1;
+
+-- ----------------------------
+-- Records of guild_bonus_config
+-- ----------------------------
+INSERT INTO `guild_bonus_config` VALUES ('1', '1', 'Goldbonus | 5% Bonus gold for the guild bank');
+INSERT INTO `guild_bonus_config` VALUES ('2', '2', 'XP-Bonus | +5% XP at the end of quest or kill monsters');
+INSERT INTO `guild_bonus_config` VALUES ('3', '3', 'Faster Spirit | Double movement speed as spirit');
+INSERT INTO `guild_bonus_config` VALUES ('4', '4', 'Cheap repair | -25% Repair costs');
+INSERT INTO `guild_bonus_config` VALUES ('5', '5', 'Goldbonus-2 | 10% Bonus gold for the guild bank');
+INSERT INTO `guild_bonus_config` VALUES ('6', '6', 'Bonus Honor | +5% Honor');
+INSERT INTO `guild_bonus_config` VALUES ('7', '7', 'Riding Pace | +5% Riding pace (Except Battlegrounds and Arenas)');
+INSERT INTO `guild_bonus_config` VALUES ('8', '8', 'Good Relationships | +5% Reputation gain');
+INSERT INTO `guild_bonus_config` VALUES ('9', '9', 'XP-Bonus-2 | +10% XP at the end of quest or kill monsters');
+INSERT INTO `guild_bonus_config` VALUES ('10', '10', 'Cheap Repair-2 | -50% Repair costs');
+INSERT INTO `guild_bonus_config` VALUES ('11', '11', 'Riding Pace-2 | +10% Riding pace (Except Battlegrounds and Arenas)');
+INSERT INTO `guild_bonus_config` VALUES ('12', '12', 'Good Relationships-2 | +10% Reputation gain');
+INSERT INTO `guild_bonus_config` VALUES ('13', '13', 'Bonus Honor-3 | +15% Honor');
+INSERT INTO `guild_bonus_config` VALUES ('14', '14', 'Bonus Gold-3 | +15% Bonus gold for the guild bank');
+INSERT INTO `guild_bonus_config` VALUES ('15', '15', 'XP-Bonus-3 | +15% XP at the end of quest or kill monsters');
+INSERT INTO `guild_bonus_config` VALUES ('16', '16', 'Bonus Honor-2 | +10% Honor');
+INSERT INTO `guild_bonus_config` VALUES ('17', '17', 'Good Relationships-3 | +20% Reputation gain');
+INSERT INTO `guild_bonus_config` VALUES ('18', '18', 'Riding Pace-3 | +15% Riding pace (Except Battlegrounds and Arenas)');
+INSERT INTO `guild_bonus_config` VALUES ('19', '19', 'Bonus Gold-4 | +15% Bonus gold for the guild bank');
+INSERT INTO `guild_bonus_config` VALUES ('20', '20', 'XP-Bonus-4 | +20% XP at the end of quest or kill monsters');
+INSERT INTO `guild_bonus_config` VALUES ('21', '21', 'Bonus Honor-4 | +40% Honor');
+INSERT INTO `guild_bonus_config` VALUES ('22', '22', 'Good Relationships-4 | +50% Reputation gain');
+INSERT INTO `guild_bonus_config` VALUES ('23', '23', 'Riding Pace-4 | +25% Riding pace (Except Battlegrounds and Arenas)');
+INSERT INTO `guild_bonus_config` VALUES ('24', '24', 'Bonus Gold-5 | +25% Bonus gold for the guild bank');
+INSERT INTO `guild_bonus_config` VALUES ('25', '25', 'XP-Bonus-5 | +30% XP at the end of quest or kill monsters');
+
+SET FOREIGN_KEY_CHECKS=0;
+
+-- ----------------------------
+-- Table structure for `guild_xp_for_next_level`
+-- ----------------------------
+DROP TABLE IF EXISTS `guild_xp_for_next_level`;
+CREATE TABLE `guild_xp_for_next_level` (
+  `level` tinyint(3) NOT NULL DEFAULT '0',
+  `xp_for_next_level` int(10) NOT NULL DEFAULT '0',
+  PRIMARY KEY (`level`)
+) ENGINE=InnoDB DEFAULT CHARSET=latin1;
+
+-- ----------------------------
+-- Records of guild_xp_for_next_level
+-- ----------------------------
+INSERT INTO `guild_xp_for_next_level` VALUES ('0',  '800000');
+INSERT INTO `guild_xp_for_next_level` VALUES ('1',  '1200000');
+INSERT INTO `guild_xp_for_next_level` VALUES ('2',  '1800000');
+INSERT INTO `guild_xp_for_next_level` VALUES ('3',  '2700000');
+INSERT INTO `guild_xp_for_next_level` VALUES ('4',  '4050000');
+INSERT INTO `guild_xp_for_next_level` VALUES ('5',  '6075000');
+INSERT INTO `guild_xp_for_next_level` VALUES ('6',  '9112500');
+INSERT INTO `guild_xp_for_next_level` VALUES ('7',  '13668750');
+INSERT INTO `guild_xp_for_next_level` VALUES ('8',  '20503125');
+INSERT INTO `guild_xp_for_next_level` VALUES ('9',  '30754687');
+INSERT INTO `guild_xp_for_next_level` VALUES ('10', '46132031');
+INSERT INTO `guild_xp_for_next_level` VALUES ('11', '69198046');
+INSERT INTO `guild_xp_for_next_level` VALUES ('12', '103797070');
+INSERT INTO `guild_xp_for_next_level` VALUES ('13', '155695605');
+INSERT INTO `guild_xp_for_next_level` VALUES ('14', '233543408');
+INSERT INTO `guild_xp_for_next_level` VALUES ('15', '350315112');
+INSERT INTO `guild_xp_for_next_level` VALUES ('16', '525472668');
+INSERT INTO `guild_xp_for_next_level` VALUES ('17', '788209002');
+INSERT INTO `guild_xp_for_next_level` VALUES ('18', '1182313503');
+INSERT INTO `guild_xp_for_next_level` VALUES ('19', '1773470254');
+INSERT INTO `guild_xp_for_next_level` VALUES ('20', '2660205381');
+INSERT INTO `guild_xp_for_next_level` VALUES ('21', '3990308072');
+INSERT INTO `guild_xp_for_next_level` VALUES ('22', '5985462109');
+INSERT INTO `guild_xp_for_next_level` VALUES ('23', '8978193163');
+INSERT INTO `guild_xp_for_next_level` VALUES ('24', '13467289745');
+INSERT INTO `guild_xp_for_next_level` VALUES ('25', '20200934618');
diff --git a/sql/LordPsyan-Patches/world/world.guildlevelsystem.sql b/sql/LordPsyan-Patches/world/world.guildlevelsystem.sql
new file mode 100644
index 0000000000..93bdf71935
--- /dev/null
+++ b/sql/LordPsyan-Patches/world/world.guildlevelsystem.sql
@@ -0,0 +1,7 @@
+DELETE FROM `trinity_string` WHERE `entry` IN (13000, 13001);
+INSERT INTO `trinity_string` VALUES ('13000', 'Guild Level: %u.', null, null, null, null, null, null, null, null);
+INSERT INTO `trinity_string` VALUES ('13001', 'Guild Experience: %u/%u.', null, null, null, null, null, null, null, null);
+DELETE FROM `command` WHERE `permission` IN (1000, 1001, 1002);
+INSERT INTO `command` VALUES ('guild linfo', '1000', 'Syntax: .guild linfo');
+INSERT INTO `command` VALUES ('guild setlevel', '1001', 'Syntax: .guild setlevel $GuildName $Level');
+INSERT INTO `command` VALUES ('guild givexp', '1002', 'Syntax: .guild givexp $GuildName $Xp');
diff --git a/src/server/database/Database/Implementation/CharacterDatabase.cpp b/src/server/database/Database/Implementation/CharacterDatabase.cpp
index d3533fc143..59fe57081b 100644
--- a/src/server/database/Database/Implementation/CharacterDatabase.cpp
+++ b/src/server/database/Database/Implementation/CharacterDatabase.cpp
@@ -610,7 +610,15 @@ void CharacterDatabaseConnection::DoPrepareStatements()
     // Prepatch by LordPsyan
     // 01
     // 02
-    // 03
+    //Guild-Level-System
+    //Load
+    PrepareStatement(CHAR_SEL_GUILD_BONUS_INFO, "SELECT RequiredGuildLevel FROM guild_bonus_config WHERE BonusId = ?", CONNECTION_SYNCH);
+    PrepareStatement(CHAR_SEL_GUILD_LEVEL_INFO, "SELECT xp, level FROM guild WHERE guildid = ?", CONNECTION_SYNCH);
+    PrepareStatement(CHAR_SEL_GUILD_XP_FOR_NEXT_LEVEL, "SELECT xp_for_next_level FROM guild_xp_for_next_level WHERE level = ?", CONNECTION_SYNCH);
+
+    //Save
+    PrepareStatement(CHAR_UPD_GUILD_LEVEL, "UPDATE guild SET level = ? WHERE guildid = ?", CONNECTION_ASYNC);
+    PrepareStatement(CHAR_UPD_GUILD_XP, "UPDATE guild SET xp = (xp + ?) WHERE guildid = ?", CONNECTION_ASYNC);
     // 04
     // 05
     // 06
diff --git a/src/server/database/Database/Implementation/CharacterDatabase.h b/src/server/database/Database/Implementation/CharacterDatabase.h
index 64e078acd8..c3b7668f6b 100644
--- a/src/server/database/Database/Implementation/CharacterDatabase.h
+++ b/src/server/database/Database/Implementation/CharacterDatabase.h
@@ -525,7 +525,12 @@ enum CharacterDatabaseStatements : uint32
     // Prepatch by LordPsyan
     // 01
     // 02
-    // 03
+    //Guild-Level-System
+    CHAR_SEL_GUILD_BONUS_INFO,
+    CHAR_SEL_GUILD_LEVEL_INFO,
+    CHAR_SEL_GUILD_XP_FOR_NEXT_LEVEL,
+    CHAR_UPD_GUILD_LEVEL,
+    CHAR_UPD_GUILD_XP,
     // 04
     // 05
     // 06
diff --git a/src/server/game/Accounts/RBAC.h b/src/server/game/Accounts/RBAC.h
index 0410f5f7a1..00a597e6a7 100644
--- a/src/server/game/Accounts/RBAC.h
+++ b/src/server/game/Accounts/RBAC.h
@@ -799,7 +799,9 @@ enum RBACPermissions
     // 11
     // 12
     // 13
-    // 14
+    RBAC_PERM_COMMAND_GUILD_LINFO                            = 1000,
+    RBAC_PERM_COMMAND_GUILD_SET_LEVEL                        = 1001,
+    RBAC_PERM_COMMAND_GUILD_GIVE_XP                          = 1002,
     // 15
     // 16
     // 17
diff --git a/src/server/game/Conditions/ConditionMgr.cpp b/src/server/game/Conditions/ConditionMgr.cpp
index bfc4f5b118..b0bfe6858a 100644
--- a/src/server/game/Conditions/ConditionMgr.cpp
+++ b/src/server/game/Conditions/ConditionMgr.cpp
@@ -32,6 +32,7 @@
 #include "SpellAuras.h"
 #include "SpellMgr.h"
 #include "World.h"
+#include "Guild.h"
 
 char const* const ConditionMgr::StaticSourceTypeData[CONDITION_SOURCE_TYPE_MAX] =
 {
@@ -532,6 +533,13 @@ bool Condition::Meets(ConditionSourceInfo& sourceInfo) const
             }
             break;
         }
+        case CONDITION_GUILD_LEVEL:
+        {
+            if (Player* player = object->ToPlayer())
+                if (Guild* guild = player->GetGuild())
+                    condMeets = CompareValues(static_cast<ComparisionType>(ConditionValue2), static_cast<uint32>(guild->GetLevel()), ConditionValue1);
+            break;
+        }
         default:
             condMeets = false;
             break;
@@ -728,6 +736,9 @@ uint32 Condition::GetSearcherTypeMaskForCondition() const
         case CONDITION_GAMEMASTER:
             mask |= GRID_MAP_TYPE_MASK_PLAYER;
             break;
+        case CONDITION_GUILD_LEVEL:
+            mask |= GRID_MAP_TYPE_MASK_PLAYER;
+            break;
         default:
             ASSERT(false && "Condition::GetSearcherTypeMaskForCondition - missing condition handling!");
             break;
@@ -2346,6 +2357,17 @@ bool ConditionMgr::isConditionTypeValid(Condition* cond) const
         case CONDITION_CHARMED:
         case CONDITION_TAXI:
         case CONDITION_GAMEMASTER:
+        case CONDITION_GUILD_LEVEL:
+        {
+            if (cond->ConditionValue2 >= COMP_TYPE_MAX)
+            {
+                TC_LOG_ERROR("sql.sql", "Guildlevel condition has invalid option (%u), skipped", cond->ConditionValue2);
+                return false;
+            }
+            if (cond->ConditionValue3)
+                TC_LOG_ERROR("sql.sql", "Guildlevel condition has useless data in value3 (%u)!", cond->ConditionValue3);
+            break;
+        }
         default:
             break;
     }
diff --git a/src/server/game/Conditions/ConditionMgr.h b/src/server/game/Conditions/ConditionMgr.h
index bd09ef511f..139e0890e4 100644
--- a/src/server/game/Conditions/ConditionMgr.h
+++ b/src/server/game/Conditions/ConditionMgr.h
@@ -87,7 +87,8 @@ enum ConditionTypes
     CONDITION_GAMEMASTER               = 50,                   // canBeGM          0              0                  true if player is gamemaster (or can be gamemaster)
     CONDITION_OBJECT_ENTRY_GUID_MASTER = 51,                   // TypeID           entry          guid               true if object is type TypeID and the entry is 0 or matches entry of the object or matches guid of the object using master branch TypeID
     CONDITION_TYPE_MASK_MASTER         = 52,                   // TypeMask         0              0                  true if object is type object's TypeMask matches provided TypeMask using master branch TypeMask
-    CONDITION_MAX
+    CONDITION_GUILD_LEVEL              = 53,                   // Guildlevel       Level          match_type
+    CONDITION_MAX                      = 54                    // MAX
 };
 
 /*! Documentation on implementing a new ConditionSourceType:
diff --git a/src/server/game/Entities/Player/Player.cpp b/src/server/game/Entities/Player/Player.cpp
index 30444f2f2f..e93c33beb7 100644
--- a/src/server/game/Entities/Player/Player.cpp
+++ b/src/server/game/Entities/Player/Player.cpp
@@ -4591,6 +4591,12 @@ void Player::BuildPlayerRepop()
     setDeathState(DEAD);
     SetHealth(1);
 
+    //Guild-Level-System (Bonus: Faster spirit)
+    if (!GetMap()->IsBattlegroundOrArena())
+        if (Guild* guild = GetGuild())
+            if (guild->HasLevelForBonus(GUILD_BONUS_FAST_SPIRIT))
+                SetSpeed(MOVE_RUN, 2.0f);
+
     SetMovement(MOVE_WATER_WALK);
     if (!GetSession()->isLogingOut())
         SetMovement(MOVE_UNROOT);
@@ -4642,6 +4648,9 @@ void Player::ResurrectPlayer(float restore_percent, bool applySickness)
     SetMovement(MOVE_LAND_WALK);
     SetMovement(MOVE_UNROOT);
 
+    //Guild-Level-System (Bonus: Faster spirit)
+    SetSpeed(MOVE_RUN, 1.0f);
+
     m_deathTimer = 0;
 
     // set health/powers (0- will be set in caller)
@@ -4983,6 +4992,15 @@ uint32 Player::DurabilityRepair(uint16 pos, bool cost, float discountMod, bool g
 
             costs = uint32(costs * discountMod * sWorld->getRate(RATE_REPAIRCOST));
 
+            //Guild-Level-System (Bonus: Cheaper Repair)
+            if (Guild* guild = GetGuild())
+            {
+                if (guild->HasLevelForBonus(GUILD_BONUS_REPAIR_1))
+                    costs -= uint32(costs*0.25f);
+                if (guild->HasLevelForBonus(GUILD_BONUS_REPAIR_2))
+                    costs -= uint32(costs*0.5f);
+            }
+
             if (costs == 0)                                   //fix for ITEM_QUALITY_ARTIFACT
                 costs = 1;
 
@@ -6891,7 +6909,20 @@ bool Player::RewardHonor(Unit* victim, uint32 groupsize, int32 honor, bool pvpto
     // 21
     // 22
     // 23
-    // 24
+
+    //Guild-Level-System (Bonus: Honor)
+    if (Guild* guild = GetGuild())
+    {
+        if (guild->HasLevelForBonus(GUILD_BONUS_HONOR_1))
+            honor_f *= 0.05f;
+        if (guild->HasLevelForBonus(GUILD_BONUS_HONOR_2))
+            honor_f *= 0.1f;
+        if (guild->HasLevelForBonus(GUILD_BONUS_HONOR_3))
+            honor_f *= 0.15f;
+        if (guild->HasLevelForBonus(GUILD_BONUS_HONOR_4))
+            honor_f *= 0.2f;
+    }
+
     // 25
     // 26
     // 27
@@ -15233,7 +15264,24 @@ void Player::RewardQuest(Quest const* quest, uint32 reward, Object* questGiver,
     // Prepatch by LordPsyan
     // 41
     // 42
-    // 43
+    //Guild-Level-System (Bonus: QuestXP)
+    if (Guild* guild = GetGuild())
+    {
+        //QuestXP for the Guild
+        guild->GiveXp(50000);
+
+        //GuildXP-Bonus
+        if (guild->HasLevelForBonus(GUILD_BONUS_XP_1))
+            XP += uint32(XP*0.05f);
+        if (guild->HasLevelForBonus(GUILD_BONUS_XP_2))
+            XP += uint32(XP*0.1f);
+        if (guild->HasLevelForBonus(GUILD_BONUS_XP_3))
+            XP += uint32(XP*0.15f);
+        if (guild->HasLevelForBonus(GUILD_BONUS_XP_4))
+            XP += uint32(XP*0.2f);
+        if (guild->HasLevelForBonus(GUILD_BONUS_XP_5))
+            XP += uint32(XP*0.3f);
+    }
     // 44
     // 45
     // 46
diff --git a/src/server/game/Entities/Unit/Unit.cpp b/src/server/game/Entities/Unit/Unit.cpp
index 7640d6ece0..8c825e6ba2 100644
--- a/src/server/game/Entities/Unit/Unit.cpp
+++ b/src/server/game/Entities/Unit/Unit.cpp
@@ -72,6 +72,7 @@
 #include "WorldPacket.h"
 #include "WorldSession.h"
 #include <cmath>
+#include "Guild.h"
 
 float baseMoveSpeed[MAX_MOVE_TYPE] =
 {
@@ -8401,6 +8402,27 @@ void Unit::UpdateSpeed(UnitMoveType mtype)
     float stack_bonus     = 1.0f;
     float non_stack_bonus = 1.0f;
 
+    //Guild-Level-System (Bonus: Ridingspeed)
+    uint8 bonusSpeed = 0;
+    if (GetTypeId() == TYPEID_PLAYER)
+    {
+        Player* player = ToPlayer();
+        if (Guild* guild = player->GetGuild())
+        {
+            if (!player->GetMap()->IsBattlegroundOrArena())
+            {
+                if (guild->HasLevelForBonus(GUILD_BONUS_RIDINGSPEED_1))
+                    bonusSpeed = 5;
+                if (guild->HasLevelForBonus(GUILD_BONUS_RIDINGSPEED_2))
+                    bonusSpeed = 10;
+                if (guild->HasLevelForBonus(GUILD_BONUS_RIDINGSPEED_2))
+                    bonusSpeed = 15;
+                if (guild->HasLevelForBonus(GUILD_BONUS_RIDINGSPEED_2))
+                    bonusSpeed = 25;
+            }
+        }
+    }
+
     switch (mtype)
     {
         // Only apply debuffs
@@ -8414,7 +8436,7 @@ void Unit::UpdateSpeed(UnitMoveType mtype)
         {
             if (IsMounted()) // Use on mount auras
             {
-                main_speed_mod  = GetMaxPositiveAuraModifier(SPELL_AURA_MOD_INCREASE_MOUNTED_SPEED);
+                main_speed_mod = GetMaxPositiveAuraModifier(SPELL_AURA_MOD_INCREASE_MOUNTED_SPEED) + bonusSpeed;
                 stack_bonus     = GetTotalAuraMultiplier(SPELL_AURA_MOD_MOUNTED_SPEED_ALWAYS);
                 non_stack_bonus += GetMaxPositiveAuraModifier(SPELL_AURA_MOD_MOUNTED_SPEED_NOT_STACK) / 100.0f;
             }
@@ -8448,7 +8470,7 @@ void Unit::UpdateSpeed(UnitMoveType mtype)
             }
             else if (IsMounted())
             {
-                main_speed_mod  = GetMaxPositiveAuraModifier(SPELL_AURA_MOD_INCREASE_MOUNTED_FLIGHT_SPEED);
+                main_speed_mod = GetMaxPositiveAuraModifier(SPELL_AURA_MOD_INCREASE_MOUNTED_FLIGHT_SPEED) + bonusSpeed;
                 stack_bonus     = GetTotalAuraMultiplier(SPELL_AURA_MOD_MOUNTED_FLIGHT_SPEED_ALWAYS);
             }
             else             // Use not mount (shapeshift for example) auras (should stack)
diff --git a/src/server/game/Guilds/Guild.cpp b/src/server/game/Guilds/Guild.cpp
index 88f08676bd..45b1f89de6 100644
--- a/src/server/game/Guilds/Guild.cpp
+++ b/src/server/game/Guilds/Guild.cpp
@@ -1274,6 +1274,9 @@ bool Guild::Create(Player* pLeader, std::string const& name)
     if (ret)
         sScriptMgr->OnGuildCreate(this, pLeader, name);
 
+    //Guild-Level-System
+    LoadLevelInfo();
+
     return ret;
 }
 
@@ -2027,6 +2030,10 @@ bool Guild::LoadFromDB(Field* fields)
         m_bankTabs[i] = new BankTab(m_id, i);
 
     _CreateLogHolders();
+
+    //Guild-Level-System
+    LoadLevelInfo();
+
     return true;
 }
 
@@ -3029,3 +3036,178 @@ void Guild::ResetTimes()
 
     _BroadcastEvent(GE_BANK_TAB_AND_MONEY_UPDATED, ObjectGuid::Empty);
 }
+
+//Guild-Level-System [Start]
+void Guild::LoadLevelInfo()
+{
+    PreparedStatement* stmt;
+    stmt = CharacterDatabase.GetPreparedStatement(CHAR_SEL_GUILD_LEVEL_INFO);
+    stmt->setUInt32(0, m_id);
+    PreparedQueryResult result = CharacterDatabase.Query(stmt);
+
+    if (result)
+    {
+        m_current_guildXp = (*result)[0].GetUInt32();
+        m_guild_level = (*result)[1].GetUInt8();
+    }
+    else
+    {
+        m_current_guildXp = 0;
+        m_guild_level = 0;
+    }
+
+    if (m_guild_level < GUILD_MAX_LEVEL)
+    {
+        stmt = CharacterDatabase.GetPreparedStatement(CHAR_SEL_GUILD_XP_FOR_NEXT_LEVEL);
+        stmt->setUInt32(0, m_guild_level);
+        PreparedQueryResult result = CharacterDatabase.Query(stmt);
+
+        if (result)
+            m_xp_for_next_level = (*result)[0].GetUInt32();
+        else
+            m_xp_for_next_level = 0;
+    }
+}
+
+bool Guild::HasLevelForBonus(uint8 guildBonus)
+{
+    switch (guildBonus)
+    {
+    case GUILD_BONUS_GOLD_1:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_GOLD_1);
+        break;
+    case GUILD_BONUS_XP_1:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_XP_1);
+        break;
+    case GUILD_BONUS_FAST_SPIRIT:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_FAST_SPIRIT);
+        break;
+    case GUILD_BONUS_REPAIR_1:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_REPAIR_1);
+        break;
+    case GUILD_BONUS_GOLD_2:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_GOLD_2);
+        break;
+    case GUILD_BONUS_RIDINGSPEED_1:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_RIDINGSPEED_1);
+        break;
+    case GUILD_BONUS_REPUTATION_1:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_REPUTATION_1);
+        break;
+    case GUILD_BONUS_XP_2:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_XP_2);
+        break;
+    case GUILD_BONUS_REPAIR_2:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_REPAIR_2);
+        break;
+    case GUILD_BONUS_RIDINGSPEED_2:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_RIDINGSPEED_2);
+        break;
+    case GUILD_BONUS_REPUTATION_2:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_REPUTATION_2);
+        break;
+    case GUILD_BONUS_HONOR_1:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_HONOR_1);
+        break;
+    case GUILD_BONUS_HONOR_2:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_HONOR_2);
+        break;
+
+    case GUILD_BONUS_GOLD_3:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_GOLD_3);
+        break;
+    case GUILD_BONUS_XP_3:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_XP_3);
+        break;
+    case GUILD_BONUS_HONOR_3:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_HONOR_3);
+        break;
+    case GUILD_BONUS_REPUTATION_3:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_REPUTATION_3);
+        break;
+    case GUILD_BONUS_RIDINGSPEED_3:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_RIDINGSPEED_3);
+        break;
+    case GUILD_BONUS_GOLD_4:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_GOLD_4);
+        break;
+    case GUILD_BONUS_XP_4:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_XP_4);
+        break;
+    case GUILD_BONUS_HONOR_4:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_HONOR_4);
+        break;
+    case GUILD_BONUS_REPUTATION_4:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_REPUTATION_4);
+        break;
+    case GUILD_BONUS_RIDINGSPEED_4:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_RIDINGSPEED_4);
+        break;
+    case GUILD_BONUS_GOLD_5:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_GOLD_5);
+        break;
+    case GUILD_BONUS_XP_5:
+        return m_guild_level >= sWorld->GetReqGuildLevelForBonus(GUILD_BONUS_XP_5);
+        break;
+
+    default:
+        return false;
+        break;
+    }
+}
+
+void Guild::GiveXp(uint32 value)
+{
+    if (m_guild_level > GUILD_MAX_LEVEL)
+        return;
+
+    if ((m_current_guildXp + value) >= m_xp_for_next_level)
+    {
+        m_current_guildXp = ((m_current_guildXp + value) - m_xp_for_next_level);
+        SetLevel(m_guild_level + 1, false);
+    }
+    else
+        m_current_guildXp += value;
+
+    PreparedStatement* stmt = CharacterDatabase.GetPreparedStatement(CHAR_UPD_GUILD_XP);
+    stmt->setUInt32(0, value);
+    stmt->setUInt32(1, m_id);
+    CharacterDatabase.Execute(stmt);
+}
+
+void Guild::SetLevel(uint8 level, bool byCommand)
+{
+    if (level > GUILD_MAX_LEVEL)
+        return;
+
+    m_guild_level = level;
+
+    if (byCommand)
+    {
+        m_current_guildXp = 0;
+
+        PreparedStatement* stmt = CharacterDatabase.GetPreparedStatement(CHAR_UPD_GUILD_XP);
+        stmt->setUInt8(0, m_current_guildXp);
+        stmt->setUInt32(1, m_id);
+        CharacterDatabase.Execute(stmt);
+    }
+
+    char worldMsg[250];
+    sprintf(worldMsg, "The Guild %s has reached Guild Level %d.", m_name.c_str(), level);
+    sWorld->SendWorldText(SERVER_MSG_STRING, worldMsg);
+
+    //Save to DB
+    PreparedStatement* stmt = CharacterDatabase.GetPreparedStatement(CHAR_UPD_GUILD_LEVEL);
+    stmt->setUInt8(0, level);
+    stmt->setUInt32(1, m_id);
+    CharacterDatabase.Execute(stmt);
+
+    //reqXp fuers naechste Level laden
+    stmt = CharacterDatabase.GetPreparedStatement(CHAR_SEL_GUILD_XP_FOR_NEXT_LEVEL);
+    stmt->setUInt32(0, level);
+    PreparedQueryResult result = CharacterDatabase.Query(stmt);
+
+    if (result)
+        m_xp_for_next_level = (*result)[0].GetUInt32();
+}
+//Guild-Level-System [End]
diff --git a/src/server/game/Guilds/Guild.h b/src/server/game/Guilds/Guild.h
index 6484196355..c2f4458015 100644
--- a/src/server/game/Guilds/Guild.h
+++ b/src/server/game/Guilds/Guild.h
@@ -210,6 +210,41 @@ enum GuildMemberFlags
     GUILDMEMBER_STATUS_MOBILE           = 0x0008, // remote chat from mobile app
 };
 
+//Guild-Level-System [Start]
+enum GuildBonus
+{
+    GUILD_BONUS_GOLD_1 = 1,
+    GUILD_BONUS_XP_1 = 2,
+    GUILD_BONUS_FAST_SPIRIT = 3,
+    GUILD_BONUS_REPAIR_1 = 4,
+    GUILD_BONUS_GOLD_2 = 5,
+    GUILD_BONUS_RIDINGSPEED_1 = 6,
+    GUILD_BONUS_REPUTATION_1 = 7,
+    GUILD_BONUS_XP_2 = 8,
+    GUILD_BONUS_REPAIR_2 = 9,
+    GUILD_BONUS_RIDINGSPEED_2 = 10,
+    GUILD_BONUS_REPUTATION_2 = 11,
+    GUILD_BONUS_HONOR_1 = 12,
+    GUILD_BONUS_HONOR_2 = 13,
+    GUILD_BONUS_GOLD_3 = 14,
+    GUILD_BONUS_XP_3 = 15,
+    GUILD_BONUS_HONOR_3 = 16,
+    GUILD_BONUS_REPUTATION_3 = 17,
+    GUILD_BONUS_RIDINGSPEED_3 = 18,
+    GUILD_BONUS_GOLD_4 = 19,
+    GUILD_BONUS_XP_4 = 20,
+    GUILD_BONUS_HONOR_4 = 21,
+    GUILD_BONUS_REPUTATION_4 = 22,
+    GUILD_BONUS_RIDINGSPEED_4 = 23,
+    GUILD_BONUS_GOLD_5 = 24,
+    GUILD_BONUS_XP_5 = 25,
+
+    GUILD_BONUS_MAX = 26
+};
+
+#define GUILD_MAX_LEVEL 25
+//Guild-Level-System [End]
+
 // Emblem info
 class TC_GAME_API EmblemInfo
 {
@@ -713,6 +748,14 @@ class TC_GAME_API Guild
         void SetBankTabText(uint8 tabId, std::string const& text);
 
         void ResetTimes();
+        //Guild-Level-System
+        void LoadLevelInfo();
+        bool HasLevelForBonus(uint8 guildBonus);
+        void GiveXp(uint32 value);
+        void SetLevel(uint8 level, bool byCommand);
+        uint8 GetLevel() const { return m_guild_level; };
+        uint32 GetCurrentXP() const { return m_current_guildXp; };
+        uint32 GetXpForNextLevel() const { return m_xp_for_next_level; };
 
     protected:
         ObjectGuid::LowType m_id;
@@ -733,6 +776,10 @@ class TC_GAME_API Guild
         // These are actually ordered lists. The first element is the oldest entry.
         LogHolder* m_eventLog;
         LogHolder* m_bankEventLog[GUILD_BANK_MAX_TABS + 1];
+        //Guild-Level-System
+        uint8 m_guild_level;
+        uint32 m_current_guildXp;
+        uint32 m_xp_for_next_level;
 
     private:
         inline uint8 _GetRanksSize() const { return uint8(m_ranks.size()); }
diff --git a/src/server/game/Handlers/LootHandler.cpp b/src/server/game/Handlers/LootHandler.cpp
index 47062216c6..037de67398 100644
--- a/src/server/game/Handlers/LootHandler.cpp
+++ b/src/server/game/Handlers/LootHandler.cpp
@@ -21,6 +21,7 @@
 #include "Creature.h"
 #include "GameObject.h"
 #include "Group.h"
+#include "Guild.h"
 #include "Item.h"
 #include "Log.h"
 #include "LootItemStorage.h"
@@ -30,6 +31,7 @@
 #include "ObjectAccessor.h"
 #include "Player.h"
 #include "WorldPacket.h"
+#include "Guild.h"
 
 void WorldSession::HandleAutostoreLootItemOpcode(WorldPacket& recvData)
 {
@@ -204,6 +206,22 @@ void WorldSession::HandleLootMoneyOpcode(WorldPacket& /*recvData*/)
             SendPacket(&data);
         }
 
+        //Guild-Level-System (Bonus: Gold)
+        if (Guild* guild = player->GetGuild())
+        {
+            //Extra Gold for the guild bank
+            if (guild->HasLevelForBonus(GUILD_BONUS_GOLD_1))
+                guild->HandleMemberDepositMoney(this, uint32(loot->gold*0.05f));
+            if (guild->HasLevelForBonus(GUILD_BONUS_GOLD_2))
+                guild->HandleMemberDepositMoney(this, uint32(loot->gold*0.1f));
+            if (guild->HasLevelForBonus(GUILD_BONUS_GOLD_3))
+                guild->HandleMemberDepositMoney(this, uint32(loot->gold*0.1f));
+            if (guild->HasLevelForBonus(GUILD_BONUS_GOLD_4))
+                guild->HandleMemberDepositMoney(this, uint32(loot->gold*0.1f));
+            if (guild->HasLevelForBonus(GUILD_BONUS_GOLD_5))
+                guild->HandleMemberDepositMoney(this, uint32(loot->gold*0.1f));
+        }
+
         loot->gold = 0;
 
         // Delete the money loot record from the DB
diff --git a/src/server/game/Miscellaneous/Formulas.h b/src/server/game/Miscellaneous/Formulas.h
index eb5e70bb6c..4906f91800 100644
--- a/src/server/game/Miscellaneous/Formulas.h
+++ b/src/server/game/Miscellaneous/Formulas.h
@@ -34,7 +34,7 @@
 // 04
 // 05
 // 06
-// 07
+#include "Guild.h"
 // 08
 // 09
 // 10
@@ -231,7 +231,21 @@ namespace Trinity
                     // 29
                     // 30
                     // 31
-                    // 32
+                    //Guild-Level-System (Bonus: MonsterKillXp)
+                    if (Guild* guild = player->GetGuild())
+                    {
+                        //GuildXP-Bonus
+                        if (guild->HasLevelForBonus(GUILD_BONUS_XP_1))
+                            gain += uint32(gain*0.05f);
+                        if (guild->HasLevelForBonus(GUILD_BONUS_XP_2))
+                            gain += uint32(gain*0.1f);
+                        if (guild->HasLevelForBonus(GUILD_BONUS_XP_3))
+                            gain += uint32(gain*0.15f);
+                        if (guild->HasLevelForBonus(GUILD_BONUS_XP_4))
+                            gain += uint32(gain*0.2f);
+                        if (guild->HasLevelForBonus(GUILD_BONUS_XP_5))
+                            gain += uint32(gain*0.3f);
+                    }
                     // 33
                     // 34
                     // 35
diff --git a/src/server/game/Miscellaneous/Language.h b/src/server/game/Miscellaneous/Language.h
index c1c9d2e793..62a19357d2 100644
--- a/src/server/game/Miscellaneous/Language.h
+++ b/src/server/game/Miscellaneous/Language.h
@@ -1151,7 +1151,9 @@ enum TrinityStrings
 
     // 10056-10066 - free
     // Prepatch by LordPsyan
-    // 01
+    //Guild-Level-System
+    LANG_GUILDINFO_LEVEL                          = 13000,
+    LANG_GUILDINFO_XP_INFO                        = 13001,
     // 02
     // 03
     // 04
diff --git a/src/server/game/Reputation/ReputationMgr.cpp b/src/server/game/Reputation/ReputationMgr.cpp
index 197518ae62..f120892f85 100644
--- a/src/server/game/Reputation/ReputationMgr.cpp
+++ b/src/server/game/Reputation/ReputationMgr.cpp
@@ -25,6 +25,7 @@
 #include "World.h"
 #include "WorldPacket.h"
 #include "WorldSession.h"
+#include "Guild.h"
 
 const int32 ReputationMgr::PointsInRank[MAX_REPUTATION_RANK] = {36000, 3000, 3000, 3000, 6000, 12000, 21000, 1000};
 
@@ -385,6 +386,19 @@ bool ReputationMgr::SetOneFactionReputation(FactionEntry const* factionEntry, in
             standing += itr->second.Standing + BaseRep;
         }
 
+        //Guild-Level-System (Bonus: Reputation)
+        if (Guild* guild = _player->GetGuild())
+        {
+            if (guild->HasLevelForBonus(GUILD_BONUS_REPUTATION_1))
+                standing += uint32(standing*0.05f);
+            if (guild->HasLevelForBonus(GUILD_BONUS_REPUTATION_2))
+                standing += uint32(standing*0.1f);
+            if (guild->HasLevelForBonus(GUILD_BONUS_REPUTATION_3))
+                standing += uint32(standing*0.2f);
+            if (guild->HasLevelForBonus(GUILD_BONUS_REPUTATION_4))
+                standing += uint32(standing*0.5f);
+        }
+
         if (standing > Reputation_Cap)
             standing = Reputation_Cap;
         else if (standing < Reputation_Bottom)
diff --git a/src/server/game/World/World.cpp b/src/server/game/World/World.cpp
index 86c38d6aa4..00a18ddab8 100644
--- a/src/server/game/World/World.cpp
+++ b/src/server/game/World/World.cpp
@@ -32,6 +32,7 @@
 #include "ChannelMgr.h"
 #include "CharacterCache.h"
 #include "CharacterDatabaseCleaner.h"
+#include "CharacterDatabase.h"
 #include "Chat.h"
 #include "Config.h"
 #include "CreatureAIRegistry.h"
@@ -110,6 +111,7 @@
 // Visit http://www.realmsofwarcraft.com/bb for forums and information
 //
 // End of prepatch
+#include "Guild.h"
 #include <boost/asio/ip/address.hpp>
 
 TC_GAME_API std::atomic<bool> World::m_stopEvent(false);
@@ -1310,7 +1312,8 @@ void World::LoadConfigSettings(bool reload)
     // 24
     // 25
     // 26
-    // 27
+    //Guild-Level-System
+    LoadGuildBonusInfo();
     // 28
     // 29
     // 30
@@ -3563,6 +3566,140 @@ void World::ReloadRBAC()
             session->InvalidateRBACData();
 }
 
+//Guild-Level-System [Start]
+void World::LoadGuildBonusInfo()
+{
+    // Don't want to add a huge section to the World Conf, therefore
+    // everything should be regulated via a table in the CharDB.
+    // The required data is loaded here.
+    m_req_guildLevel_gold_1 = SelectReqGuildLevelForBonus(GUILD_BONUS_GOLD_1);
+    m_req_guildLevel_xp_1 = SelectReqGuildLevelForBonus(GUILD_BONUS_XP_1);
+    m_req_guildLevel_fast_spirit = SelectReqGuildLevelForBonus(GUILD_BONUS_FAST_SPIRIT);
+    m_req_guildLevel_repair_1 = SelectReqGuildLevelForBonus(GUILD_BONUS_REPAIR_1);
+    m_req_guildLevel_gold_2 = SelectReqGuildLevelForBonus(GUILD_BONUS_GOLD_2);
+    m_req_guildLevel_ridingspeed_1 = SelectReqGuildLevelForBonus(GUILD_BONUS_RIDINGSPEED_1);
+    m_req_guildLevel_reputation_1 = SelectReqGuildLevelForBonus(GUILD_BONUS_REPUTATION_1);
+    m_req_guildLevel_xp_2 = SelectReqGuildLevelForBonus(GUILD_BONUS_XP_2);
+    m_req_guildLevel_repair_2 = SelectReqGuildLevelForBonus(GUILD_BONUS_REPAIR_2);
+    m_req_guildLevel_ridingspeed_2 = SelectReqGuildLevelForBonus(GUILD_BONUS_RIDINGSPEED_2);
+    m_req_guildLevel_reputation_2 = SelectReqGuildLevelForBonus(GUILD_BONUS_REPUTATION_2);
+    m_req_guildLevel_honor_1 = SelectReqGuildLevelForBonus(GUILD_BONUS_HONOR_1);
+    m_req_guildLevel_honor_2 = SelectReqGuildLevelForBonus(GUILD_BONUS_HONOR_2);
+
+    m_req_guildLevel_gold_3 = SelectReqGuildLevelForBonus(GUILD_BONUS_GOLD_3);
+    m_req_guildLevel_xp_3 = SelectReqGuildLevelForBonus(GUILD_BONUS_XP_3);
+    m_req_guildLevel_honor_3 = SelectReqGuildLevelForBonus(GUILD_BONUS_HONOR_3);
+    m_req_guildLevel_reputation_3 = SelectReqGuildLevelForBonus(GUILD_BONUS_REPUTATION_3);
+    m_req_guildLevel_ridingspeed_3 = SelectReqGuildLevelForBonus(GUILD_BONUS_RIDINGSPEED_3);
+    m_req_guildLevel_gold_4 = SelectReqGuildLevelForBonus(GUILD_BONUS_GOLD_4);
+    m_req_guildLevel_xp_4 = SelectReqGuildLevelForBonus(GUILD_BONUS_XP_4);
+    m_req_guildLevel_honor_4 = SelectReqGuildLevelForBonus(GUILD_BONUS_HONOR_4);
+    m_req_guildLevel_reputation_4 = SelectReqGuildLevelForBonus(GUILD_BONUS_REPUTATION_4);
+    m_req_guildLevel_ridingspeed_4 = SelectReqGuildLevelForBonus(GUILD_BONUS_RIDINGSPEED_4);
+    m_req_guildLevel_gold_5 = SelectReqGuildLevelForBonus(GUILD_BONUS_GOLD_5);
+    m_req_guildLevel_xp_5 = SelectReqGuildLevelForBonus(GUILD_BONUS_XP_5);
+}
+
+uint8 World::SelectReqGuildLevelForBonus(uint8 guildBonus)
+{
+    PreparedStatement* stmt;
+    stmt = CharacterDatabase.GetPreparedStatement(CHAR_SEL_GUILD_BONUS_INFO);
+    stmt->setUInt8(0, guildBonus);
+    PreparedQueryResult result = CharacterDatabase.Query(stmt);
+
+    if (result)
+        return (*result)[0].GetUInt8();
+    else
+        return 0;
+}
+
+uint8 World::GetReqGuildLevelForBonus(uint8 guildBonus)
+{
+    switch (guildBonus)
+    {
+    case GUILD_BONUS_GOLD_1:
+        return m_req_guildLevel_gold_1;
+        break;
+    case GUILD_BONUS_GOLD_2:
+        return m_req_guildLevel_gold_2;
+        break;
+    case GUILD_BONUS_HONOR_1:
+        return m_req_guildLevel_honor_1;
+        break;
+    case GUILD_BONUS_HONOR_2:
+        return m_req_guildLevel_honor_2;
+        break;
+    case GUILD_BONUS_RIDINGSPEED_1:
+        return m_req_guildLevel_ridingspeed_1;
+        break;
+    case GUILD_BONUS_RIDINGSPEED_2:
+        return m_req_guildLevel_ridingspeed_2;
+        break;
+    case GUILD_BONUS_REPAIR_1:
+        return m_req_guildLevel_repair_1;
+        break;
+    case GUILD_BONUS_REPAIR_2:
+        return m_req_guildLevel_repair_2;
+        break;
+    case GUILD_BONUS_REPUTATION_1:
+        return m_req_guildLevel_reputation_1;
+        break;
+    case GUILD_BONUS_REPUTATION_2:
+        return m_req_guildLevel_reputation_2;
+        break;
+    case GUILD_BONUS_FAST_SPIRIT:
+        return m_req_guildLevel_fast_spirit;
+        break;
+    case GUILD_BONUS_XP_1:
+        return m_req_guildLevel_xp_1;
+        break;
+    case GUILD_BONUS_XP_2:
+        return m_req_guildLevel_xp_2;
+        break;
+
+    case GUILD_BONUS_GOLD_3:
+        return m_req_guildLevel_gold_3;
+        break;
+    case GUILD_BONUS_XP_3:
+        return m_req_guildLevel_xp_3;
+        break;
+    case GUILD_BONUS_HONOR_3:
+        return m_req_guildLevel_honor_3;
+        break;
+    case GUILD_BONUS_REPUTATION_3:
+        return m_req_guildLevel_reputation_3;
+        break;
+    case GUILD_BONUS_RIDINGSPEED_3:
+        return m_req_guildLevel_ridingspeed_3;
+        break;
+    case GUILD_BONUS_GOLD_4:
+        return m_req_guildLevel_gold_4;
+        break;
+    case GUILD_BONUS_XP_4:
+        return m_req_guildLevel_xp_4;
+        break;
+    case GUILD_BONUS_HONOR_4:
+        return m_req_guildLevel_honor_4;
+        break;
+    case GUILD_BONUS_REPUTATION_4:
+        return m_req_guildLevel_reputation_4;
+        break;
+    case GUILD_BONUS_RIDINGSPEED_4:
+        return m_req_guildLevel_ridingspeed_4;
+        break;
+    case GUILD_BONUS_GOLD_5:
+        return m_req_guildLevel_gold_5;
+        break;
+    case GUILD_BONUS_XP_5:
+        return m_req_guildLevel_xp_5;
+        break;
+    default:
+        return 0;
+        break;
+    }
+}
+//Guild-Level-System [End]
+
 void World::RemoveOldCorpses()
 {
     m_timers[WUPDATE_CORPSES].SetCurrent(m_timers[WUPDATE_CORPSES].GetInterval());
diff --git a/src/server/game/World/World.h b/src/server/game/World/World.h
index 975cd0d06f..80ae7b43de 100644
--- a/src/server/game/World/World.h
+++ b/src/server/game/World/World.h
@@ -909,6 +909,11 @@ class TC_GAME_API World
         bool IsGuidWarning() { return _guidWarn; }
         bool IsGuidAlert() { return _guidAlert; }
 
+        //Guild-Level-System
+        void LoadGuildBonusInfo();
+        uint8 GetReqGuildLevelForBonus(uint8 guildBonus);
+        uint8 SelectReqGuildLevelForBonus(uint8 guildBonus);
+
     protected:
         void _UpdateGameTime();
 
@@ -1011,6 +1016,33 @@ class TC_GAME_API World
         void DoGuidAlertRestart();
         QueryCallbackProcessor _queryProcessor;
 
+        //Guild-Level-System
+        uint8 m_req_guildLevel_gold_1;
+        uint8 m_req_guildLevel_xp_1;
+        uint8 m_req_guildLevel_fast_spirit;
+        uint8 m_req_guildLevel_repair_1;
+        uint8 m_req_guildLevel_gold_2;
+        uint8 m_req_guildLevel_ridingspeed_1;
+        uint8 m_req_guildLevel_reputation_1;
+        uint8 m_req_guildLevel_xp_2;
+        uint8 m_req_guildLevel_repair_2;
+        uint8 m_req_guildLevel_ridingspeed_2;
+        uint8 m_req_guildLevel_reputation_2;
+        uint8 m_req_guildLevel_honor_1;
+        uint8 m_req_guildLevel_honor_2;
+        uint8 m_req_guildLevel_gold_3;
+        uint8 m_req_guildLevel_xp_3;
+        uint8 m_req_guildLevel_honor_3;
+        uint8 m_req_guildLevel_reputation_3;
+        uint8 m_req_guildLevel_ridingspeed_3;
+        uint8 m_req_guildLevel_gold_4;
+        uint8 m_req_guildLevel_xp_4;
+        uint8 m_req_guildLevel_honor_4;
+        uint8 m_req_guildLevel_reputation_4;
+        uint8 m_req_guildLevel_ridingspeed_4;
+        uint8 m_req_guildLevel_gold_5;
+        uint8 m_req_guildLevel_xp_5;
+
         std::string _guidWarningMsg;
         std::string _alertRestartReason;
 
diff --git a/src/server/scripts/Commands/cs_guild.cpp b/src/server/scripts/Commands/cs_guild.cpp
index ae71814a03..c080b4463d 100644
--- a/src/server/scripts/Commands/cs_guild.cpp
+++ b/src/server/scripts/Commands/cs_guild.cpp
@@ -49,6 +49,9 @@ public:
             { "rank",     rbac::RBAC_PERM_COMMAND_GUILD_RANK,     true, &HandleGuildRankCommand,             "" },
             { "rename",   rbac::RBAC_PERM_COMMAND_GUILD_RENAME,   true, &HandleGuildRenameCommand,           "" },
             { "info",     rbac::RBAC_PERM_COMMAND_GUILD_INFO,     true, &HandleGuildInfoCommand,             "" },
+            { "linfo",    rbac::RBAC_PERM_COMMAND_GUILD_LINFO,    true, &HandleGuildLInfoCommand,            "" },
+            { "setlevel", rbac::RBAC_PERM_COMMAND_GUILD_SET_LEVEL,true, &HandleGuildSetLevelCommand,         "" },
+            { "givexp",   rbac::RBAC_PERM_COMMAND_GUILD_GIVE_XP,  true, &HandleGuildGiveXpCommand,           "" },
         };
         static std::vector<ChatCommand> commandTable =
         {
@@ -308,6 +311,127 @@ public:
         handler->PSendSysMessage(LANG_GUILD_INFO_EXTRA_INFO, guild->GetInfo().c_str()); // Extra Information
         return true;
     }
+
+    //Guild-Level-System
+    static bool HandleGuildLInfoCommand(ChatHandler* handler, char const* /*args*/)
+    {
+        Guild* guild = nullptr;
+        //Guild* guild = handler->GetSession()->GetPlayer()->GetGuild();
+        if (Player* target = handler->getSelectedPlayerOrSelf())
+        guild = target->GetGuild();
+
+        if (guild)
+        {
+            handler->PSendSysMessage(LANG_GUILDINFO_LEVEL, guild->GetLevel());
+
+            if (guild->GetLevel() >= GUILD_MAX_LEVEL)
+                handler->PSendSysMessage(LANG_GUILDINFO_XP_INFO, 0, 0);
+            else
+                handler->PSendSysMessage(LANG_GUILDINFO_XP_INFO, guild->GetCurrentXP(), guild->GetXpForNextLevel());
+
+            handler->PSendSysMessage("Active Bonus:");
+
+            if (guild->GetLevel() > 0)
+            {
+                if (guild->HasLevelForBonus(GUILD_BONUS_GOLD_1))
+                    handler->PSendSysMessage("Gold bonus [Rank 1]");
+                if (guild->HasLevelForBonus(GUILD_BONUS_XP_1))
+                    handler->PSendSysMessage("Bonus Experience [Rank 1]");
+                if (guild->HasLevelForBonus(GUILD_BONUS_FAST_SPIRIT))
+                    handler->PSendSysMessage("Faster Ghost");
+                if (guild->HasLevelForBonus(GUILD_BONUS_REPAIR_1))
+                    handler->PSendSysMessage("Cheaper Repairs [Rank 1]");
+                if (guild->HasLevelForBonus(GUILD_BONUS_GOLD_2))
+                    handler->PSendSysMessage("Gold bonus [Rank 2]");
+                if (guild->HasLevelForBonus(GUILD_BONUS_RIDINGSPEED_1))
+                    handler->PSendSysMessage("Mount Speed [Rank 1]");
+                if (guild->HasLevelForBonus(GUILD_BONUS_REPUTATION_1))
+                    handler->PSendSysMessage("Reputation [Rank 1]");
+                if (guild->HasLevelForBonus(GUILD_BONUS_XP_2))
+                    handler->PSendSysMessage("Bonus Experience [Rank 2]");
+                if (guild->HasLevelForBonus(GUILD_BONUS_REPAIR_2))
+                    handler->PSendSysMessage("Cheaper Repairs [Rank 2]");
+                if (guild->HasLevelForBonus(GUILD_BONUS_RIDINGSPEED_2))
+                    handler->PSendSysMessage("Mount Speed [Rank 2]");
+                if (guild->HasLevelForBonus(GUILD_BONUS_REPAIR_2))
+                    handler->PSendSysMessage("Reputation [Rank 2]");
+                if (guild->HasLevelForBonus(GUILD_BONUS_HONOR_1))
+                    handler->PSendSysMessage("Bonus Honor [Rank 1]");
+                if (guild->HasLevelForBonus(GUILD_BONUS_HONOR_2))
+                    handler->PSendSysMessage("Bonus Honor [Rank 2]");
+            }
+            else
+                handler->PSendSysMessage("None");
+
+            return true;
+        }
+        else
+        {
+            handler->PSendSysMessage("You are not in a guild");
+            return false;
+        }
+    }
+
+    static bool HandleGuildSetLevelCommand(ChatHandler* handler, char const* args)
+    {
+        if (!*args)
+            return false;
+
+        char* guildNameStr;
+        char* levelStr;
+        handler->extractOptFirstArg((char*)args, &guildNameStr, &levelStr);
+
+        if (!levelStr)
+            return false;
+
+        uint8 newLevel = uint8(atoi(levelStr));
+        Guild* guild = sGuildMgr->GetGuildByName(guildNameStr);
+
+        if (guild)
+        {
+            if (newLevel > GUILD_MAX_LEVEL)
+            {
+                handler->PSendSysMessage("Your guild is max level");
+                return false;
+            }
+            else
+                guild->SetLevel(newLevel, true);
+        }
+        else
+        {
+            handler->PSendSysMessage("There is no guild named [%s] found.", guildNameStr);
+            return false;
+        }
+
+        return true;
+    }
+
+    static bool HandleGuildGiveXpCommand(ChatHandler* handler, char const* args)
+    {
+        if (!*args)
+            return false;
+
+        char* guildNameStr;
+        char* xpStr;
+        handler->extractOptFirstArg((char*)args, &guildNameStr, &xpStr);
+
+        if (!xpStr)
+            return false;
+
+        uint32 value = uint32(atoi(xpStr));
+
+        Guild* guild = sGuildMgr->GetGuildByName(guildNameStr);
+
+        if (guild)
+            guild->GiveXp(value);
+        else
+        {
+            handler->PSendSysMessage("There was no guild with the name [%s] found.", guildNameStr);
+            return false;
+        }
+
+        return true;
+    }
 };
 
 void AddSC_guild_commandscript()
-- 
2.20.1

