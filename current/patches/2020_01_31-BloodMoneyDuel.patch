From 261c94298f4117a7bc578891d7c423f7459ccb7c Mon Sep 17 00:00:00 2001
From: LordPsyan <lordpsyan@gmail.com>
Date: Tue, 11 Feb 2020 09:31:30 -0600
Subject: [PATCH] 2020_01_31-BloodMoneyDuel

---
 .../world/world.bloodmoneyduel.sql            |   2 +
 src/server/scripts/Custom/BloodMoneyDuels.cpp | 453 ++++++++++++++++++
 .../scripts/Custom/custom_script_loader.cpp   |   6 +-
 3 files changed, 459 insertions(+), 2 deletions(-)
 create mode 100644 sql/LordPsyan-Patches/world/world.bloodmoneyduel.sql
 create mode 100644 src/server/scripts/Custom/BloodMoneyDuels.cpp

diff --git a/sql/LordPsyan-Patches/world/world.bloodmoneyduel.sql b/sql/LordPsyan-Patches/world/world.bloodmoneyduel.sql
new file mode 100644
index 0000000000..3f5e686088
--- /dev/null
+++ b/sql/LordPsyan-Patches/world/world.bloodmoneyduel.sql
@@ -0,0 +1,2 @@
+INSERT INTO `creature_template` (`entry`, `modelid1`, `name`, `minlevel`, `maxlevel`, `faction`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `BaseVariance`, `RangeVariance`, `unit_class`, `unit_flags`, `unit_flags2`, `HoverHeight`, `HealthModifier`, `ManaModifier`, `ArmorModifier`, `DamageModifier`, `ExperienceModifier`, `RegenHealth`, `flags_extra`, `ScriptName`) VALUES
+(100001, 26502, 'Duel Master', 83, 83, 35, 1, 1, 1.14286, 2, 1, 1, 1, 1, 2, 2048, 1, 1, 1, 1, 1, 1, 1, 2, 'npc_blood_money');
\ No newline at end of file
diff --git a/src/server/scripts/Custom/BloodMoneyDuels.cpp b/src/server/scripts/Custom/BloodMoneyDuels.cpp
new file mode 100644
index 0000000000..f5efa251ec
--- /dev/null
+++ b/src/server/scripts/Custom/BloodMoneyDuels.cpp
@@ -0,0 +1,453 @@
+// Blood Money Duels
+// Original code by Parranoia from AC-web
+// Updated by Faiver from Emudevs
+// Edited by Rochet2
+// Original thread: http://www.ac-web.org/forums/showthread.php?156980-C-Blood-Money-Duels
+
+#include "Chat.h"
+#include "Player.h"
+#include "ScriptedGossip.h"
+#include "WorldSession.h"
+#include "ScriptMgr.h"
+
+// Set USE_TOKEN to 1 if you want to have it use tokens in place of gold
+#define USE_TOKEN       0
+#define TOKEN_ID        29434
+
+
+class BloodMoney
+{
+public:
+    // Data definitions
+    struct MoneyInfo
+    {
+        MoneyInfo() : challenger(0), amount(0), accepted(false) { }
+        uint32 challenger;
+        uint32 amount;
+        bool accepted;
+    };
+    typedef std::list<MoneyInfo> MoneyList;
+    typedef std::unordered_map<uint32, MoneyList> MoneyListMap;
+
+    // Returns a copy or empty list
+    MoneyList GetMoneyList(uint32 targetGUID)
+    {
+
+        MoneyListMap::const_iterator it = _listMap.find(targetGUID);
+        if (it != _listMap.end())
+            return it->second;
+        return MoneyList();
+    }
+
+    // Finds a challenge and removes it, then returns the challenge amount. Otherwise returns 0 and does nothing
+    uint32 GetAndRemoveChallenge(uint32 targetGUID, uint32 challengerGUID)
+    {
+        MoneyListMap::iterator it = _listMap.find(targetGUID);
+        if (it == _listMap.end())
+            return 0;
+
+        MoneyList& list = it->second;
+        for (MoneyList::iterator itr = list.begin(); itr != list.end(); ++itr)
+        {
+            if (itr->challenger != challengerGUID)
+                continue;
+            if (!itr->accepted)
+                return 0;
+
+            uint32 amount = itr->amount;
+
+
+            list.erase(itr);
+            if (list.empty())
+                _listMap.erase(targetGUID);
+
+            return amount;
+        }
+        return 0;
+    }
+
+    bool IsChallenged(uint32 targetGUID)
+    {
+
+        return _listMap.find(targetGUID) != _listMap.end();
+    }
+
+    bool HasChallenger(uint32 targetGUID, uint32 challengerGUID)
+    {
+
+        MoneyListMap::const_iterator it = _listMap.find(targetGUID);
+        if (it == _listMap.end())
+            return false;
+
+        const MoneyList& list = it->second;
+        for (MoneyList::const_iterator itr = list.begin(); itr != list.end(); ++itr)
+            if (itr->challenger == challengerGUID)
+                return true;
+
+        return false;
+    }
+
+    bool AddChallenger(uint32 targetGUID, uint32 challengerGUID, uint32 amount)
+    {
+        MoneyInfo moneyInfo;
+        moneyInfo.challenger = challengerGUID;
+        moneyInfo.amount = amount;
+        moneyInfo.accepted = false;
+
+
+
+        if (HasChallenger(targetGUID, challengerGUID))
+            return false;
+
+        if (HasChallenger(challengerGUID, targetGUID))
+            return false;
+
+
+        _listMap[targetGUID].push_back(moneyInfo);
+        return true;
+    }
+
+    bool RemoveChallenger(uint32 targetGUID, uint32 challengerGUID)
+    {
+
+        MoneyListMap::iterator it = _listMap.find(targetGUID);
+        if (it == _listMap.end())
+            return false;
+
+        MoneyList &list = it->second;
+        for (MoneyList::iterator it = list.begin(); it != list.end(); ++it)
+        {
+            if (it->challenger != challengerGUID)
+                continue;
+
+
+            list.erase(it);
+            if (list.empty())
+                _listMap.erase(targetGUID);
+            return true;
+        }
+        return false;
+    }
+
+    bool AcceptChallenge(uint32 targetGUID, uint32 challengerGUID)
+    {
+
+        MoneyListMap::iterator it = _listMap.find(targetGUID);
+        if (it == _listMap.end())
+            return false;
+
+        MoneyList &list = it->second;
+        for (MoneyList::iterator itr = list.begin(); itr != list.end(); ++itr)
+        {
+            if (itr->challenger != challengerGUID)
+                continue;
+
+            // Already accepted, internal error
+            if (itr->accepted)
+                return false;
+
+
+            itr->accepted = true;
+            return true;
+        }
+        return false;
+    }
+
+    // Used to lock for using GetMap access
+    LockType& GetLock()
+    {
+        return _lock;
+    }
+
+    // Access map directly, remember to use lock to guard the read and write
+    MoneyListMap& GetMap()
+    {
+        return _listMap;
+    }
+
+private:
+    MoneyListMap _listMap;
+    LockType _lock;
+};
+
+static BloodMoney bloodMoney;
+
+class npc_blood_money : public CreatureScript
+{
+public:
+    npc_blood_money() : CreatureScript("npc_blood_money") { }
+
+    enum Sender
+    {
+        SENDER_CLOSE,
+        SENDER_CHALLENGE,
+        SENDER_ACCEPT,
+        SENDER_DECLINE,
+    };
+
+    static bool OnGossipHello(Player* player, Creature* creature)
+    {
+        AddGossipItemFor(player, GOSSIP_ICON_BATTLE, "Challenge a Player", SENDER_CHALLENGE, 0);
+        if (bloodMoney.IsChallenged(player->GetGUID().GetCounter()))
+        {
+            BloodMoney::MoneyList list = bloodMoney.GetMoneyList(player->GetGUID().GetCounter());
+            for (BloodMoney::MoneyList::const_iterator it = list.begin(); it != list.end(); ++it)
+            {
+                // Skip accepted entries
+                if (it->accepted)
+                    continue;
+
+                if (Player* plr = ObjectAccessor::FindPlayer(ObjectGuid(HighGuid::Player, it->challenger)))
+                {
+#if(USE_TOKEN == 1)
+                    char msg[100];
+                    sprintf(msg, "Accept %s's Challenge of %u tokens", plr->GetName().c_str(), it->amount);
+                    AddGossipItemFor(player, GOSSIP_ICON_INTERACT_1, msg, SENDER_ACCEPT, it->challenger);
+                    sprintf(msg, "Decline %s's Challenge of %u tokens", plr->GetName().c_str(), it->amount);
+                    AddGossipItemFor(player, GOSSIP_ICON_INTERACT_1, msg, SENDER_DECLINE, it->challenger);
+#else
+                    char msg[100];
+                    sprintf(msg, "Accept %s's Challenge of %ug", plr->GetName().c_str(), it->amount);
+                    AddGossipItemFor(player, GOSSIP_ICON_INTERACT_1, msg, SENDER_ACCEPT, it->challenger);
+                    sprintf(msg, "Decline %s's Challenge of %ug", plr->GetName().c_str(), it->amount);
+                    AddGossipItemFor(player, GOSSIP_ICON_INTERACT_1, msg, SENDER_DECLINE, it->challenger);
+#endif
+                }
+            }
+        }
+        AddGossipItemFor(player, GOSSIP_ICON_CHAT, "Nevermind", SENDER_CLOSE, 0);
+        SendGossipMenuFor(player, DEFAULT_GOSSIP_MESSAGE, creature->GetGUID());
+        return true;
+    }
+
+    static bool OnGossipSelect(Player* player, Creature* creature, uint32 sender, uint32 action)
+    {
+        player->PlayerTalkClass->ClearMenus();
+        switch (sender)
+        {
+            case SENDER_ACCEPT:
+                if (bloodMoney.AcceptChallenge(player->GetGUID().GetCounter(), action))
+                {
+                    if (Player* challenger = ObjectAccessor::FindPlayer(ObjectGuid(HighGuid::Player, action)))
+                        creature->Whisper(player->GetName() + " has accepted your challenge!", LANG_UNIVERSAL, challenger, true);
+                }
+                else
+                {
+                    player->GetSession()->SendNotification("Internal error, try again");
+                }
+                break;
+            case SENDER_DECLINE:
+                if (bloodMoney.RemoveChallenger(player->GetGUID().GetCounter(), action))
+                {
+                    if (Player* challenger = ObjectAccessor::FindPlayer(ObjectGuid(HighGuid::Player, action)))
+                        creature->Whisper(player->GetName() + " has declined your challenge!", LANG_UNIVERSAL, challenger, true);
+                }
+                break;
+            case SENDER_CHALLENGE:
+#if(USE_TOKEN == 1)
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 5 tokens", GOSSIP_SENDER_MAIN, 5, "", 0, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 10 tokens", GOSSIP_SENDER_MAIN, 10, "", 0, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 15 tokens", GOSSIP_SENDER_MAIN, 15, "", 0, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 25 tokens", GOSSIP_SENDER_MAIN, 25, "", 0, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 50 tokens", GOSSIP_SENDER_MAIN, 50, "", 0, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 100 tokens", GOSSIP_SENDER_MAIN, 100, "", 0, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 150 tokens", GOSSIP_SENDER_MAIN, 150, "", 0, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 200 tokens", GOSSIP_SENDER_MAIN, 200, "", 0, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 250 tokens", GOSSIP_SENDER_MAIN, 250, "", 0, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 500 tokens", GOSSIP_SENDER_MAIN, 500, "", 0, true);
+#else
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 5g", GOSSIP_SENDER_MAIN, 5, "", 5 * GOLD, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 10g", GOSSIP_SENDER_MAIN, 10, "", 10 * GOLD, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 15g", GOSSIP_SENDER_MAIN, 15, "", 15 * GOLD, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 25g", GOSSIP_SENDER_MAIN, 25, "", 25 * GOLD, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 50g", GOSSIP_SENDER_MAIN, 50, "", 50 * GOLD, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 100g", GOSSIP_SENDER_MAIN, 100, "", 100 * GOLD, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 150g", GOSSIP_SENDER_MAIN, 150, "", 150 * GOLD, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 200g", GOSSIP_SENDER_MAIN, 200, "", 200 * GOLD, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 250g", GOSSIP_SENDER_MAIN, 250, "", 250 * GOLD, true);
+                AddGossipItemFor(player, GOSSIP_ICON_MONEY_BAG, "Bet 500g", GOSSIP_SENDER_MAIN, 500, "", 500 * GOLD, true);
+#endif
+                SendGossipMenuFor(player, DEFAULT_GOSSIP_MESSAGE, creature->GetGUID());
+                return true;
+
+            default:
+                CloseGossipMenuFor(player);
+                return true;
+        }
+
+        OnGossipHello(player, creature);
+        return true;
+    }
+
+    static bool OnGossipSelectCode(Player* player, Creature* creature, uint32 sender, uint32 action, const char* code)
+    {
+        player->PlayerTalkClass->ClearMenus();
+
+        std::string targetName(code);
+        if (player->GetName() == targetName)
+        {
+            player->GetSession()->SendNotification("You can not challenge yourself");
+            OnGossipSelect(player, creature, SENDER_CHALLENGE, GOSSIP_ACTION_INFO_DEF);
+            return true;
+        }
+
+        Player* target = ObjectAccessor::FindConnectedPlayerByName(targetName);
+        if (!target)
+        {
+            player->GetSession()->SendNotification("Challenged player not logged in");
+            OnGossipSelect(player, creature, SENDER_CHALLENGE, GOSSIP_ACTION_INFO_DEF);
+            return true;
+        }
+
+        if (player->GetGUID() == target->GetGUID())
+        {
+            player->GetSession()->SendNotification("You can not challenge yourself");
+            OnGossipSelect(player, creature, SENDER_CHALLENGE, GOSSIP_ACTION_INFO_DEF);
+            return true;
+        }
+
+        if (target->GetZoneId() != player->GetZoneId())
+        {
+            player->GetSession()->SendNotification("%s is not in same zone", target->GetName().c_str());
+            OnGossipSelect(player, creature, SENDER_CHALLENGE, GOSSIP_ACTION_INFO_DEF);
+            return true;
+        }
+
+#if (USE_TOKEN == 1)
+        if (!player->HasItemCount(TOKEN_ID, action))
+        {
+            player->GetSession()->SendNotification("You do not have enough tokens");
+            OnGossipSelect(player, creature, SENDER_CHALLENGE, GOSSIP_ACTION_INFO_DEF);
+            return true;
+        }
+
+        if (!target->HasItemCount(TOKEN_ID, action))
+        {
+            player->GetSession()->SendNotification("%s does not have enough tokens", target->GetName().c_str());
+            OnGossipSelect(player, creature, SENDER_CHALLENGE, GOSSIP_ACTION_INFO_DEF);
+            return true;
+        }
+#else
+        if (target->GetMoney() < action * GOLD)
+        {
+            player->GetSession()->SendNotification("%s does not have enough money", target->GetName().c_str());
+            OnGossipSelect(player, creature, SENDER_CHALLENGE, GOSSIP_ACTION_INFO_DEF);
+            return true;
+        }
+
+        if (player->GetMoney() < action * GOLD)
+        {
+            player->GetSession()->SendNotification("You do not have enough money");
+            OnGossipSelect(player, creature, SENDER_CHALLENGE, GOSSIP_ACTION_INFO_DEF);
+            return true;
+        }
+#endif
+
+        if (!bloodMoney.AddChallenger(target->GetGUID().GetCounter(), player->GetGUID().GetCounter(), action))
+        {
+            player->GetSession()->SendNotification("One of you already challenged the other");
+            OnGossipSelect(player, creature, SENDER_CHALLENGE, GOSSIP_ACTION_INFO_DEF);
+            return true;
+        }
+
+        creature->Whisper(player->GetName() + " has requested a Blood Money duel with you!", LANG_UNIVERSAL, target, true);
+        CloseGossipMenuFor(player);
+        return true;
+    }
+
+    struct MyAI : public ScriptedAI
+        {
+            MyAI(Creature* m_creature) : ScriptedAI(m_creature) { }
+            bool GossipHello(Player* player) override
+            {
+                return OnGossipHello(player, me);
+            }
+            bool GossipSelect(Player* player, uint32 menuId, uint32 gossipListId) override
+            {
+                uint32 sender = player->PlayerTalkClass->GetGossipOptionSender(gossipListId);
+                uint32 action = player->PlayerTalkClass->GetGossipOptionAction(gossipListId);
+                return OnGossipSelect(player, me, sender, action);
+            }
+            bool GossipSelectCode(Player* player, uint32 menuId, uint32 gossipListId, char const* code) override
+            {
+                uint32 sender = player->PlayerTalkClass->GetGossipOptionSender(gossipListId);
+                uint32 action = player->PlayerTalkClass->GetGossipOptionAction(gossipListId);
+                return OnGossipSelectCode(player, me, sender, action, code);
+            }
+        };
+
+    CreatureAI* GetAI(Creature* m_creature) const override
+        {
+            return new MyAI(m_creature);
+        }
+};
+
+class BloodMoneyReward : public PlayerScript
+{
+public:
+    BloodMoneyReward() : PlayerScript("BloodMoneyReward") { }
+
+    void OnDuelEnd(Player* winner, Player* loser, DuelCompleteType type)
+    {
+        if (type != DUEL_WON)
+            return;
+
+        // Loser challenged winner
+        uint32 amount = bloodMoney.GetAndRemoveChallenge(winner->GetGUID().GetCounter(), loser->GetGUID().GetCounter());
+
+        // Winner challenged loser
+        if (!amount)
+            amount = bloodMoney.GetAndRemoveChallenge(loser->GetGUID().GetCounter(), winner->GetGUID().GetCounter());
+
+        // No challenges
+        if (!amount)
+            return;
+
+#if (USE_TOKEN == 1)
+        if (!winner->HasItemCount(TOKEN_ID, amount))
+        {
+            winner->AddAura(15007, winner); // Apply Rez sickness for possible cheating
+            ChatHandler(winner->GetSession()).PSendSysMessage("|cff800C0C[Blood Money] |cffFFFFFFYou have gained Resurrection Sickness for possibly trying to abuse the system.");
+            ChatHandler(loser->GetSession()).PSendSysMessage("|cff800C0C[Blood Money] |cffFFFFFFYour opponent tried to cheat you. Don't worry you did not lose any tokens because of this.");
+        }
+        else if (!loser->HasItemCount(TOKEN_ID, amount))
+        {
+            loser->AddAura(15007, loser);   // Apply Rez sickness for possible cheating
+            ChatHandler(winner->GetSession()).PSendSysMessage("|cff800C0C[Blood Money] |cffFFFFFFYou have gained Resurrection Sickness for possibly trying to abuse the system.");
+            ChatHandler(loser->GetSession()).PSendSysMessage("|cff800C0C[Blood Money] |cffFFFFFFYour opponent tried to cheat you. Don't worry you did not lose any tokens because of this.");
+        }
+        else
+        {
+            winner->AddItem(TOKEN_ID, amount);
+            loser->DestroyItemCount(TOKEN_ID, amount, true);
+            ChatHandler(winner->GetSession()).PSendSysMessage("|cff800C0C[Blood Money] |cffFFFFFFCongratulations on winning %u tokens!", amount);
+        }
+#else
+        int32 money = amount * GOLD;
+        if (winner->GetMoney() < money)
+        {
+            winner->AddAura(15007, winner);         // Apply Rez sickness for possible cheating
+            ChatHandler(winner->GetSession()).PSendSysMessage("|cff800C0C[Blood Money] |cffFFFFFFYou have gained Resurrection Sickness for possibly trying to abuse the system.");
+            ChatHandler(loser->GetSession()).PSendSysMessage("|cff800C0C[Blood Money] |cffFFFFFFYour opponent tried to cheat you. Don't worry you did not lose any money because of this.");
+        }
+        else if (loser->GetMoney() < money)
+        {
+            loser->AddAura(15007, loser);           // Apply Rez sickness for possible cheating
+            ChatHandler(winner->GetSession()).PSendSysMessage("|cff800C0C[Blood Money] |cffFFFFFFYour opponent tried to cheat you. He did not have enough money to pay off the bet.");
+            ChatHandler(loser->GetSession()).PSendSysMessage("|cff800C0C[Blood Money] |cffFFFFFFYou have gained Resurrection Sickness for possibly trying to abuse the system.");
+        }
+        else
+        {
+            winner->ModifyMoney(money);
+            loser->ModifyMoney(-money);
+            ChatHandler(winner->GetSession()).PSendSysMessage("|cff800C0C[Blood Money] |cffFFFFFFCongratulations on winning %ug!", amount);
+        }
+#endif
+    }
+};
+
+void AddSC_npc_blood_money()
+{
+    new BloodMoneyReward();
+    new npc_blood_money();
+}
diff --git a/src/server/scripts/Custom/custom_script_loader.cpp b/src/server/scripts/Custom/custom_script_loader.cpp
index b6b83ac184..c1f1c95a45 100644
--- a/src/server/scripts/Custom/custom_script_loader.cpp
+++ b/src/server/scripts/Custom/custom_script_loader.cpp
@@ -129,7 +129,8 @@
 // start111
 // start112
 // start113
-// start114
+// Blood Money Duels
+void AddSC_npc_blood_money();
 // start115
 // start116
 // start117
@@ -334,7 +335,8 @@ void AddCustomScripts()
 // end111
 // end112
 // end113
-// end114
+// Blood Money Duels
+    AddSC_npc_blood_money();
 // end115
 // end116
 // end117
-- 
2.20.1

