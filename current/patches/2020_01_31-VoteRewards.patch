From 537d6f44b48521c1af75ef2122489bfc4d0f41f9 Mon Sep 17 00:00:00 2001
From: LordPsyan <lordpsyan@gmail.com>
Date: Fri, 14 Feb 2020 16:03:45 -0600
Subject: [PATCH] 2020_01_31-VoteRewards

---
 sql/LordPsyan-Patches/auth/auth.vote-npc.sql  |   6 +
 .../world/world.vote-npc.sql                  |   3 +
 .../scripts/Custom/custom_script_loader.cpp   |   6 +-
 .../scripts/Custom/npc_vote_rewarder.cpp      | 449 ++++++++++++++++++
 4 files changed, 462 insertions(+), 2 deletions(-)
 create mode 100644 sql/LordPsyan-Patches/auth/auth.vote-npc.sql
 create mode 100644 sql/LordPsyan-Patches/world/world.vote-npc.sql
 create mode 100644 src/server/scripts/Custom/npc_vote_rewarder.cpp

diff --git a/sql/LordPsyan-Patches/auth/auth.vote-npc.sql b/sql/LordPsyan-Patches/auth/auth.vote-npc.sql
new file mode 100644
index 0000000000..7cc7eb1e4c
--- /dev/null
+++ b/sql/LordPsyan-Patches/auth/auth.vote-npc.sql
@@ -0,0 +1,6 @@
+
+CREATE TABLE `voting_points` (
+  `id` int(10) NOT NULL DEFAULT '0',
+  `points` int(10) NOT NULL DEFAULT '0',
+  PRIMARY KEY (`id`)
+) ENGINE=InnoDB DEFAULT CHARSET=latin1
diff --git a/sql/LordPsyan-Patches/world/world.vote-npc.sql b/sql/LordPsyan-Patches/world/world.vote-npc.sql
new file mode 100644
index 0000000000..2bc6842da5
--- /dev/null
+++ b/sql/LordPsyan-Patches/world/world.vote-npc.sql
@@ -0,0 +1,3 @@
+DELETE FROM `creature_template` WHERE `entry` = 60005;
+INSERT INTO `creature_template` (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `dmgschool`, `BaseAttackTime`, `RangeAttackTime`, `BaseVariance`, `RangeVariance`, `unit_class`, `unit_flags`, `unit_flags2`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `HoverHeight`, `HealthModifier`, `ManaModifier`, `ArmorModifier`, `DamageModifier`, `ExperienceModifier`, `RacialLeader`, `movementId`, `RegenHealth`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `VerifiedBuild`) values
+('60005','0','0','0','0','0','18','0','18','0','George','Vote Rewards','','0','59','61','0','35','1','1.48','1.14286','0','0','0','1500','1900','1','1','1','0','0','0','0','0','0','0','0','7','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','','1','1','1','1','1','1','1','0','0','1','0','0','npc_vote_rewarder','1');
\ No newline at end of file
diff --git a/src/server/scripts/Custom/custom_script_loader.cpp b/src/server/scripts/Custom/custom_script_loader.cpp
index b6b83ac184..1a1d4f244a 100644
--- a/src/server/scripts/Custom/custom_script_loader.cpp
+++ b/src/server/scripts/Custom/custom_script_loader.cpp
@@ -83,7 +83,8 @@
 // start65
 // start66
 // start67
-// start68
+// Vote Rewarder NPC
+    void AddSC_npc_vote_rewarder();
 // start69
 // start70
 // start71
@@ -288,7 +289,8 @@ void AddCustomScripts()
 // end65
 // end66
 // end67
-// end68
+// Vote Rewarder NPC
+    AddSC_npc_vote_rewarder();
 // end69
 // end70
 // end71
diff --git a/src/server/scripts/Custom/npc_vote_rewarder.cpp b/src/server/scripts/Custom/npc_vote_rewarder.cpp
new file mode 100644
index 0000000000..2c8456bf6d
--- /dev/null
+++ b/src/server/scripts/Custom/npc_vote_rewarder.cpp
@@ -0,0 +1,449 @@
+/*
+* Copyright (C) 2008-2014 TrinityCore <http://www.trinitycore.org/>
+* Copyright (C) 2014 Roca <http://wow-studio.eu/>
+*
+* This program is free software; you can redistribute it and/or modify it
+* under the terms of the GNU General Public License as published by the
+* Free Software Foundation; either version 2 of the License, or (at your
+* option) any later version.
+*
+* This program is distributed in the hope that it will be useful, but WITHOUT
+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
+* more details.
+*
+* You should have received a copy of the GNU General Public License along
+* with this program. If not, see <http://www.gnu.org/licenses/>.
+*
+* Standard Copyrightgezuppel, kannst du ruhig entfernen, wenn du moechtest
+*/
+
+#include "ScriptMgr.h"
+#include "ScriptedCreature.h"
+#include "ScriptedGossip.h"
+#include "Player.h"
+#include "WorldSession.h"
+#include "DatabaseEnv.h"
+#include "ItemTemplate.h"
+#include "ObjectMgr.h"
+#include "Mail.h"
+#include "Item.h"
+
+enum VoteRewarder
+{
+                     //Hier beliebige entry aus der Tabelle npc_text eintragen. Momentan halt standard Text :)
+    GOSSIP_MESSAGE = DEFAULT_GOSSIP_MESSAGE,
+
+    MAIN_MENU  = 1,
+    MENU_60P   = 2,
+    MENU_250P  = 3,
+    MENU_500P  = 4,
+    MENU_1000P = 5,
+    MENU_2000P = 6,
+    MENU_MISC  = 7,
+};
+
+class npc_vote_rewarder : public CreatureScript
+{
+public:
+    npc_vote_rewarder() : CreatureScript("npc_vote_rewarder") { }
+
+
+
+    static bool OnGossipHello(Player* player, Creature* creature)
+    {
+        uint32 votePoints = 0;
+        uint32 accId = 0;
+        accId = player->GetSession()->GetAccountId();
+
+        QueryResult result = LoginDatabase.PQuery("SELECT points FROM voting_points WHERE id = %u", accId);
+
+        if (result)
+        {
+            Field* fields = result->Fetch();
+            votePoints = fields[0].GetUInt32();
+        }
+
+        AddGossipItemFor(player, 7, "Exchange Vote Points", MAIN_MENU, 1);
+        AddGossipItemFor(player, 0, "Bye for now.",               MENU_MISC, 1);
+        player->PlayerTalkClass->SendGossipMenu(GOSSIP_MESSAGE, creature->GetGUID());
+        return true;
+    }
+
+    static bool OnGossipSelect(Player* player, Creature* creature, uint32 sender, uint32 action)
+    {
+        uint32 votePoints = 0;
+        uint32 accId = 0;
+        accId = player->GetSession()->GetAccountId();
+
+        QueryResult result = LoginDatabase.PQuery("SELECT points FROM voting_points WHERE id = %u", accId);
+
+        if (result)
+        {
+            Field* fields = result->Fetch();
+            votePoints = fields[0].GetUInt32();
+        }
+
+        player->PlayerTalkClass->ClearMenus();
+
+        if (sender == MAIN_MENU)
+        {
+            AddGossipItemFor(player, 7, "Rewards for 60 Points.",   MENU_60P,   1);
+            AddGossipItemFor(player, 7, "Rewards for 250 Points.",  MENU_250P,  1);
+            AddGossipItemFor(player, 7, "Rewards for 500 Points.",  MENU_500P,  1);
+            AddGossipItemFor(player, 7, "Rewards for 1000 Points.", MENU_1000P, 1);
+            AddGossipItemFor(player, 7, "Rewards for 2000 Points.", MENU_2000P, 1);
+            AddGossipItemFor(player, 0, "Bye for now.",                           MENU_MISC,  1);
+            player->PlayerTalkClass->SendGossipMenu(GOSSIP_MESSAGE, creature->GetGUID());
+        }
+
+        if (sender == MENU_60P)
+        {
+            switch (action)
+            {
+                case 1:
+                    AddGossipItemFor(player, 2, "Exchange 60 Points for 100 Gold", MENU_60P,  2);
+                    AddGossipItemFor(player, 7, "Main Menu",                  MAIN_MENU, 1);
+                    AddGossipItemFor(player, 0, "Bye for now.",                          MENU_MISC, 1);
+                    player->PlayerTalkClass->SendGossipMenu(GOSSIP_MESSAGE, creature->GetGUID());
+                    break;
+                case 2:
+                    if (votePoints < 60)
+                    {
+                        creature->Whisper("You do not have enough voting points", LANG_UNIVERSAL, player);
+                        CloseGossipMenuFor(player);
+                        return false;
+                    }
+
+                    if ((player->GetMoney() + (100 * GOLD)) > MAX_MONEY_AMOUNT)
+                    {
+                        creature->Whisper("You can not carry so much gold with you.", LANG_UNIVERSAL, player);
+                        CloseGossipMenuFor(player);
+                        return false;
+                    }
+                    else
+                    {
+                        player->ModifyMoney(100 * GOLD);
+                        LoginDatabase.PExecute("UPDATE voting_points SET points = (points - %u) WHERE id = %u;", 60, accId);
+                        CloseGossipMenuFor(player);
+                    }
+                    break;
+            }
+        }
+
+        if (sender == MENU_250P)
+        {
+            switch (action)
+            {
+                case 1:
+                    AddGossipItemFor(player, 2, "250 Points for 10x Emblem of Heroism.", MENU_250P, 2);
+                    AddGossipItemFor(player, 2, "250 Points for 10x Emblem der Conquest.",  MENU_250P, 3);
+                    AddGossipItemFor(player, 2, "250 Points for 10x Emblem der Honor.",       MENU_250P, 4);
+                    AddGossipItemFor(player, 2, "250 Points for 10x Emblem of Triumphs.",   MENU_250P, 5);
+                    AddGossipItemFor(player, 2, "250 Points for 10x Emblem of Frosts.",     MENU_250P, 6);
+                    AddGossipItemFor(player, 7, "Main Menu.",                                    MAIN_MENU, 1);
+                    AddGossipItemFor(player, 0, "Bye for now.",                                            MENU_MISC, 1);
+                    player->PlayerTalkClass->SendGossipMenu(GOSSIP_MESSAGE, creature->GetGUID());
+                    break;
+                case 2:
+                    SendVotereward(player, creature, 40752, 10, 250);
+                    break;
+                case 3:
+                    SendVotereward(player, creature, 45624, 10, 250);
+                    break;
+                case 4:
+                    SendVotereward(player, creature, 40753, 10, 250);
+                    break;
+                case 5:
+                    SendVotereward(player, creature, 47241, 10, 250);
+                    break;
+                case 6:
+                    SendVotereward(player, creature, 49426, 10, 250);
+                    break;
+            }
+        }
+
+        if (sender == MENU_500P)
+        {
+            switch (action)
+            {
+                case 1:
+                    AddGossipItemFor(player, 2, "500 Points for 1000 Gold.",           MENU_500P, 2);
+                    AddGossipItemFor(player, 2, "500 Points for Cat Carrier.", MENU_500P, 3);
+                    AddGossipItemFor(player, 7, "Main Menu",                              MAIN_MENU, 1);
+                    AddGossipItemFor(player, 0, "Bye for now.",                                      MENU_MISC, 1);
+                    player->PlayerTalkClass->SendGossipMenu(GOSSIP_MESSAGE, creature->GetGUID());
+                    break;
+                case 2:
+                    if (votePoints < 500)
+                    {
+                        creature->Whisper("You do not have enough voting points", LANG_UNIVERSAL, player);
+                        CloseGossipMenuFor(player);
+                        return false;
+                    }
+
+                    if ((player->GetMoney() + (1000 * GOLD)) > MAX_MONEY_AMOUNT)
+                    {
+                        creature->Whisper("You can not carry so much gold with you.", LANG_UNIVERSAL, player);
+                        CloseGossipMenuFor(player);
+                        return false;
+                    }
+                    else
+                    {
+                        player->ModifyMoney(1000 * GOLD);
+                        LoginDatabase.PExecute("UPDATE voting_points SET points = (points - %u) WHERE id = %u;", 500, accId);
+                        CloseGossipMenuFor(player);
+                    }
+                    break;
+                case 3:
+                    SendVotereward(player, creature, 8491, 1, 500);
+                    break;
+            }
+        }
+
+        if (sender == MENU_1000P)
+        {
+            switch (action)
+            {
+                case 1:
+                    AddGossipItemFor(player, 2, "1000 Points for Lil' XT.",         MENU_1000P,  2);
+                    AddGossipItemFor(player, 2, "1000 Points for Pandaren Monk.",  MENU_1000P,  3);
+                    AddGossipItemFor(player, 2, "1000 Points for Hippogryph Hatchling.",    MENU_1000P,  4);
+                    AddGossipItemFor(player, 2, "1000 Points for Dragon Kite.",         MENU_1000P,  5);
+                    AddGossipItemFor(player, 2, "1000 Points for Parrot Cage (Hyacinth Macaw).", MENU_1000P,  6);
+                    AddGossipItemFor(player, 2, "1000 Points for Tuskarr Kite.",        MENU_1000P,  7);
+                    AddGossipItemFor(player, 2, "1000 Points for Captured Flame.",   MENU_1000P,  8);
+                    AddGossipItemFor(player, 2, "1000 Points for Goblin Weather Machine.",  MENU_1000P,  9);
+                    AddGossipItemFor(player, 2, "1000 Points for Sen'jin Fetish.",   MENU_1000P, 10);
+                    AddGossipItemFor(player, 2, "1000 Points for Macabre Marionette.",    MENU_1000P, 11);
+                    AddGossipItemFor(player, 7, "Main Menu",                                 MAIN_MENU,   1);
+                    AddGossipItemFor(player, 0, "Bye for now.",                                         MENU_MISC,   1);
+                    player->PlayerTalkClass->SendGossipMenu(GOSSIP_MESSAGE, creature->GetGUID());
+                    break;
+                case 2:
+                    SendVotereward(player, creature, 54847, 1, 1000);
+                    break;
+                case 3:
+                    SendVotereward(player, creature, 49665, 1, 1000);
+                    break;
+                case 4:
+                    SendVotereward(player, creature, 23713, 1, 1000);
+                    break;
+                case 5:
+                    SendVotereward(player, creature, 34493, 10, 1000);
+                    break;
+                case 6:
+                    SendVotereward(player, creature, 8494, 1, 1000);
+                    break;
+                case 7:
+                    SendVotereward(player, creature, 49287, 1, 1000);
+                    break;
+                case 8:
+                    SendVotereward(player, creature, 23083, 1, 1000);
+                    break;
+                case 9:
+                    SendVotereward(player, creature, 35227, 1, 1000);
+                    break;
+                case 10:
+                    SendVotereward(player, creature, 45606, 1, 1000);
+                    break;
+                case 11:
+                    SendVotereward(player, creature, 46831, 1, 1000);
+                    break;
+            }
+        }
+
+        if (sender == MENU_2000P)
+        {
+            switch (action)
+            {
+                case 1:
+                    AddGossipItemFor(player, 2, "2000 Points for Reins of the Swift Spectral Tiger",     MENU_2000P,  2);
+                    AddGossipItemFor(player, 2, "2000 Points for Reins of the White Polar Bear.",        MENU_2000P,  3);
+                    AddGossipItemFor(player, 2, "2000 Points for Reins of the Grand Black War Mammoth.", MENU_2000P,  4);
+                    AddGossipItemFor(player, 2, "2000 Points for Chopper/Mechano-Hog.",                  MENU_2000P,  5);
+                    AddGossipItemFor(player, 2, "2000 Points for Swift Nether Drake.",                   MENU_2000P,  6);
+                    AddGossipItemFor(player, 2, "2000 Points for Merciless Nether Drake.",               MENU_2000P,  7);
+                    AddGossipItemFor(player, 2, "2000 Points for Vengeful Nether Drake.",                MENU_2000P,  8);
+                    AddGossipItemFor(player, 2, "2000 Points for Brutal Nether Drake.",                  MENU_2000P,  9);
+                    AddGossipItemFor(player, 2, "2000 Points for Furious Gladiator's Frost Wyrm.",       MENU_2000P, 10);
+                    AddGossipItemFor(player, 2, "2000 Points for Riding Turtle.",                        MENU_2000P, 11);
+                    AddGossipItemFor(player, 2, "2000 Points for Celestial Steed.",                      MENU_2000P, 12);
+                    AddGossipItemFor(player, 2, "2000 Points for Blazing Hippogryph.",                   MENU_2000P, 13);
+                    AddGossipItemFor(player, 2, "2000 Points for X-51 Nether-Rocket.",                   MENU_2000P, 14);
+                    AddGossipItemFor(player, 2, "2000 Points for X-51 Nether-Rocket X-TREME.",           MENU_2000P, 15);
+                    AddGossipItemFor(player, 7, "Main Menu",                                             MAIN_MENU,   1);
+                    AddGossipItemFor(player, 0, "Bye for now.",                                          MENU_MISC,   1);
+                    player->PlayerTalkClass->SendGossipMenu(GOSSIP_MESSAGE, creature->GetGUID());
+                    break;
+                case 2:
+                    SendVotereward(player, creature, 49284, 1, 2000);
+                    break;
+                case 3:
+                    SendVotereward(player, creature, 43962, 1, 2000);
+                    break;
+                case 4:
+                    SendVotereward(player, creature, player->GetTeam() == ALLIANCE ? 43959 : 44083, 1, 2000);
+                    break;
+                case 5:
+                    SendVotereward(player, creature, player->GetTeam() == ALLIANCE ? 44413 : 41508, 1, 2000);
+                    break;
+                case 6:
+                    SendVotereward(player, creature, 30609, 1, 2000);
+                    break;
+                case 7:
+                    SendVotereward(player, creature, 34092, 1, 2000);
+                    break;
+                case 8:
+                    SendVotereward(player, creature, 37676, 1, 2000);
+                    break;
+                case 9:
+                    SendVotereward(player, creature, 43516, 1, 2000);
+                    break;
+                case 10:
+                    SendVotereward(player, creature, 46171, 1, 2000);
+                    break;
+                case 11:
+                    SendVotereward(player, creature, 23720, 1, 2000);
+                    break;
+                case 12:
+                    SendVotereward(player, creature, 54811, 1, 2000);
+                    break;
+                case 13:
+                    SendVotereward(player, creature, 54069, 1, 2000);
+                    break;
+                case 14:
+                    SendVotereward(player, creature, 49285, 1, 2000);
+                    break;
+                case 15:
+                    SendVotereward(player, creature, 49286, 1, 2000);
+                    break;
+            }
+        }
+
+        if (sender == MENU_MISC)
+        {
+            if (action == 1)
+            {
+                creature->Whisper("Bye for now.", LANG_UNIVERSAL, player);
+                CloseGossipMenuFor(player);
+            }
+        }
+
+        return true;
+    }
+
+    void static SendVotereward(Player* player, Creature* creature, uint32 itemEntry, uint32 count, uint32 vp)
+    {
+        uint32 votePoints = 0;
+        uint32 accId = 0;
+        accId = player->GetSession()->GetAccountId();
+
+        QueryResult result = LoginDatabase.PQuery("SELECT points FROM voting_points WHERE id = %u", accId);
+
+        if (result)
+        {
+            Field* fields = result->Fetch();
+            votePoints = fields[0].GetUInt32();
+        }
+
+        if (votePoints < vp)
+        {
+            player->Whisper("You do not have enough voting points", LANG_UNIVERSAL, player);
+            CloseGossipMenuFor(player);
+            return;
+        }
+
+        uint32 noSpaceForCount = 0;
+
+        ItemPosCountVec dest;
+        InventoryResult msg = player->CanStoreNewItem(NULL_BAG, NULL_SLOT, dest, itemEntry, count, &noSpaceForCount);
+
+        //The player receives the reward via IngameMail, if he has no more space in his pockets.
+        if (msg != EQUIP_ERR_OK)
+        {
+            //Texte kannst du aendern, wie du lustig bist.
+            std::string subject = "Payroll";
+            std::string text = "Here's your reward. Thank you very much for your support. Please vote again soon to help our server.";
+
+            typedef std::pair<uint32, uint32> ItemPair;
+            typedef std::list< ItemPair > ItemPairs;
+            ItemPairs items;
+
+            ItemTemplate const* item_proto = sObjectMgr->GetItemTemplate(itemEntry);
+
+            while (count > item_proto->GetMaxStackSize())
+            {
+                items.push_back(ItemPair(itemEntry, item_proto->GetMaxStackSize()));
+                count -= item_proto->GetMaxStackSize();
+            }
+
+            items.push_back(ItemPair(itemEntry, count));
+
+            if (items.size() > MAX_MAIL_ITEMS)
+                return;
+
+            MailSender sender(MAIL_NORMAL, 0, MAIL_STATIONERY_GM);
+            MailDraft draft(subject, text);
+
+            SQLTransaction trans = CharacterDatabase.BeginTransaction();
+
+            for (ItemPairs::const_iterator itr = items.begin(); itr != items.end(); ++itr)
+            {
+                if (Item* item = Item::CreateItem(itr->first, itr->second, 0))
+                {
+                    item->SaveToDB(trans);
+                    draft.AddItem(item);
+                }
+            }
+
+            draft.SendMailTo(trans, MailReceiver(player, ObjectGuid(player->GetGUID())), sender);
+            CharacterDatabase.CommitTransaction(trans);
+        }
+        else
+        {
+            player->AddItem(itemEntry, count);
+        }
+
+        LoginDatabase.PExecute("UPDATE voting_points SET points = (points - %u) WHERE id = %u;", vp, accId);
+
+        creature->Whisper("Here's your reward. Thank you very much for your support. Please vote again soon to help our server.", LANG_UNIVERSAL, player);
+    }
+
+    static bool OnGossipSelectCode(Player* player, Creature* m_creature, uint32 sender, uint32 action, char const* code)
+        {
+            player->PlayerTalkClass->ClearMenus();
+            // code
+            return true;
+        }
+    struct MyAI : public ScriptedAI
+        {
+            MyAI(Creature* m_creature) : ScriptedAI(m_creature) { }
+            bool GossipHello(Player* player) override
+            {
+                return OnGossipHello(player, me);
+            }
+            bool GossipSelect(Player* player, uint32 menuId, uint32 gossipListId) override
+            {
+                uint32 sender = player->PlayerTalkClass->GetGossipOptionSender(gossipListId);
+                uint32 action = player->PlayerTalkClass->GetGossipOptionAction(gossipListId);
+                return OnGossipSelect(player, me, sender, action);
+            }
+            bool GossipSelectCode(Player* player, uint32 menuId, uint32 gossipListId, char const* code) override
+            {
+                uint32 sender = player->PlayerTalkClass->GetGossipOptionSender(gossipListId);
+                uint32 action = player->PlayerTalkClass->GetGossipOptionAction(gossipListId);
+                return OnGossipSelectCode(player, me, sender, action, code);
+            }
+        };
+
+    CreatureAI* GetAI(Creature* m_creature) const override
+        {
+            return new MyAI(m_creature);
+        }
+};
+
+void AddSC_npc_vote_rewarder()
+{
+    new npc_vote_rewarder();
+}
-- 
2.20.1

